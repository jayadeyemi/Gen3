# This file is used to configure the AWS modules for the commons project.

aurora:
  # controls module.aurora.count
  enabled: true
  # module.aurora.<…>
  vpcName: <your-vpc-name>
  clusterIdentifier: <aurora-cluster>
  instance:
    identifier: <aurora-cluster-instance>
    class: <db.serverless>
  engine:
    type: <aurora-postgresql>
    version: <13.7>
    mode: <provisioned>
    serverlessV2:
      minCapacity: <0.5>
      maxCapacity: <10.0>
  master:
    username: <postgres>
    # see comment below about secrets
    password: <aurora-master-password>
  encryption:
    storageEncrypted: true
    kmsKeyId: <''>
  backup:
    retentionPeriod: 10
    preferredWindow: '02:00-03:00'
  applyImmediate: true
  skipFinalSnapshot: false
  finalSnapshotIdentifier: <aurora-cluster-snapshot-final>
  # if using AWS Secrets Manager instead of in-chart
  useSecretsManager: false

waf:
  enabled: true
  vpcName: <your-vpc-name>
  baseRules:
    - managedRuleGroupName: AWSManagedRulesAmazonIpReputationList
      priority: 0
      overrideToCount: []
    - managedRuleGroupName: AWSManagedRulesPHPRuleSet
      priority: 1
      overrideToCount:
        - AWSManagedReconnaissanceList
    - managedRuleGroupName: AWSManagedRulesWordPressRuleSet
      priority: 2
      overrideToCount:
        - WordPressExploitableCommands_QUERYSTRING
        - WordPressExploitablePaths_URIPATH
  additionalRules: []

cdisVpc:
  amiAccountId: <099720109477>
  squidImageSearchCriteria: <ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*>
  vpc:
    cidrBlock: <172.24.17.0/20>
    secondaryCidrBlock: <''>
    name: <your-vpc-name>
    sshKeyName: <your-ssh-key>
    peering:
      cidr: <10.128.0.0/20>
      vpcId: <vpc-e2b51d99>
    csoc:
      accountId: <433568766270>
      managed: true
  flowLogs:
    enabled: false
    trafficType: ALL
  cloudTrail:
    deploy: true
    sendToCsoc: true
    commonsLogRetention: 3650

  # nested “data-bucket” module
  dataBucket:
    deploy: true
    cloudWatchLogGroup: <arn:aws:logs:…>
    environment: <your-vpc-name>
    # nested “cloud-trail” sub-module
    cloudTrail:
      enabled: true
      bucketArn: <arn:aws:s3:::…>
      bucketId: <your-log-bucket-id>

  # nested “data-bucket-queue” module
  dataBucketQueue:
    bucketName: <your-data-bucket-name>
    configureNotifications: false

  # nested “fence-bot-user” module
  fenceBotUser:
    bucketName: <your-data-bucket-name>
    bucketAccessArns: []

  # nested “squid-auto” module
  squidAuto:
    enabled: true
    peeringCidr: <10.128.0.0/20>
    secondaryCidrBlock: <''>
    env:
      vpcName: <your-vpc-name>
      vpcCidr: <172.24.17.0/20>
      vpcId: <vpc-123456>
      logGroup: <your-log-group>
      squidName: squid-auto-<your-vpc-name>
    proxy:
      subnet:
        cidr: <auto-calculated>
      instance:
        type: t3.medium
        driveSize: 8
        bootstrapScript: <path/to/squid_running_on_docker.sh>
        extraVars: []
      ha:
        desiredCapacity: 2
        minSize: 1
        maxSize: 3

commonsVpcEs:
  enabled: true
  vpcName: <your-vpc-name>
  vpcId: <from-cdisVpc>
  instanceType: <m4.large.elasticsearch>
  ebsVolumeSizeGb: 20
  encryption: true
  instanceCount: 3
  organizationName: Basic Service
  esVersion: '7.10'
  esLinkedRole: true
  esName: <optional-custom-name>

csocPeeringConnection:
  enabled: true
  vpcName: <your-vpc-name>
  routeTableName: <eks_private>
  csocVpcId: <vpc-e2b51d99>
  csocCidr: <10.128.0.0/20>
  organizationName: Basic Service
  vpcCidrBlock: <172.24.17.0/20>
  pcxId: <output-from-cdisVpc>

eks:
  enabled: true
  vpcName: <your-vpc-name>
  vpcId: <from-cdisVpc>
  ec2KeyName: <someone@uchicago.edu>
  instanceType: t3.large
  peeringCidr: <10.128.0.0/20>
  csocManaged: true
  secondaryCidrBlock: <''>
  usersPolicy: <optional>
  workerDriveSize: 30
  version: '1.25'
  jupyter:
    enabled: true
    instanceType: t3.large
    bootstrapScript: bootstrap.sh
    workerDriveSize: 30
    asg:
      desiredCapacity: 0
      maxSize: 10
      minSize: 0
  workflow:
    enabled: false
    instanceType: t3.2xlarge
    bootstrapScript: bootstrap.sh
    workerDriveSize: 30
    asg:
      desiredCapacity: 0
      maxSize: 50
      minSize: 0
  kernel: N/A
  cidrsToRouteToGw: []
  haSquid: false
  dualProxy: false
  singleAzForJupyter: false
  snsTopicArn: arn:aws:sns:…
  activationId: ''
  customerId: ''
  fips: false
  fipsAmiKms: <arn:aws:kms:…>
  fipsEnabledAmi: <ami-…>
  availabilityZones:
    - us-east-1a
    - us-east-1c
    - us-east-1d
  useAsg: true
  useKarpenter: false
  karpenterVersion: v0.32.9
  deployKarpenterInK8s: false
  ciRun: false
  publicAccess: true
  enableVpcEndpoints: true
  spotLinkedRole: false
  csocAccountId: 433568766270
  k8sBootstrapResources: false

configFiles:
  vpcName: <your-vpc-name>
  dbFenceAddress: <localhost>
  dbFenceUsername: fence_user
  dbFencePassword: <fence-password>
  dbFenceName: fence
  dbSheepdogAddress: <localhost>
  dbSheepdogUsername: sheepdog
  dbSheepdogPassword: <sheepdog-password>
  dbSheepdogName: sheepdog
  dbPeregrineAddress: <localhost>
  dbPeregrinePassword: <peregrine-password>
  dbPeregrineName: peregrine
  dbIndexdAddress: <localhost>
  dbIndexdUsername: indexd_user
  dbIndexdPassword: <indexd-password>
  dbIndexdName: indexd
  hostname: <app-hostname>
  googleClientId: <your-google-client-id>
  googleClientSecret: <your-google-client-secret>
  hmacEncryptionKey: <base64-key>
  sheepdogSecretKey: <sheepdog-secret-key>
  sheepdogIndexdPassword: <indexd-password>
  sheepdogOAuth2ClientId: <deprecated>
  sheepdogOAuth2ClientSecret: <deprecated>
  gitopsPath: https://github.com/uc-cdis/cdis-manifest.git
  sslCertificateId: <AWS-CERTIFICATE-ID>
  awsUserKey: <from-cdisVpc>
  awsUserKeyId: <from-cdisVpc>
  indexdPrefix: <your-prefix>
  mailgunApiKey: <key>
  mailgunApiUrl: https://api.mailgun.net/v3/
  mailgunSmtpHost: smtp.mailgun.org

gen3Deployment:
  enabled: true
  aurora:
    hostname: <from-aurora>
    username: <from-aurora>
    password: <from-aurora>
  eks:
    endpoint: <from-eks>
    caCert: <from-eks>
    clusterName: <from-eks>
  services:
    ambassador:
      enabled: true
    arborist:
      enabled: false
      db:
        adminUsername: <postgres>
        adminPassword: <from-aurora>
        namespace: default
    argo:
      enabled: false
      db:
        adminUsername: <postgres>
        adminPassword: <from-aurora>
        namespace: default
    audit:
      enabled: false
      db:
        adminUsername: <postgres>
        adminPassword: <from-aurora>
        namespace: default
    awsEsProxy:
      enabled: false
    dbgap:
      enabled: false
    dd:
      enabled: false
    dictionaryUrl: <http://…>
    dispatcherJobNumber: <1>
    fence:
      enabled: false
      configPath: <path/to/fence-config>
      accessKey: <from-cdisVpc>
      secretKey: <from-cdisVpc>
    guppy:
      enabled: false
    hatchery:
      enabled: false
    hostname: <app-hostname>
    indexd:
      enabled: false
      prefix: <your-prefix>
    ingress:
      enabled: false
    manifestservice:
      enabled: false
    metadata:
      enabled: false
    netpolicy:
      enabled: false
    peregrine:
      enabled: false
    pidgin:
      enabled: false
    portal:
      enabled: false
    publicDatasets: []
    requestor:
      enabled: false
    revproxy:
      enabled: false
      arn: <your-revproxy-arn>
    ssjdispatcher:
      enabled: false
    tierAccess:
      level: <string>
      limit: <number>
    usersync:
      enabled: false
      schedule: <cron>
    useryamlS3Path: <s3://…>
    useryamlPath: <path/to/useryaml.yaml>
    wts:
      enabled: false
    slack:
      sendDbgap: false
      webhook: <your-webhook>
    uploadBucket: <your-upload-bucket>
    namespace: default
    gitopsPath: https://github.com/uc-cdis/cdis-manifest.git
    googleClientId: <…>
    googleClientSecret: <…>
