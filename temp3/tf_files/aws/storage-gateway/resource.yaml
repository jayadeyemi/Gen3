---
resource:
  aws_instance:
    storage-gw-server:
      ami: ${var.ami_id}
      instance_type: m4.xlarge
      associate_public_ip_address: false
      subnet_id: ${data.aws_subnet.public_kube.id}
      key_name: ${var.key_name}
      vpc_security_group_ids:
        ${aws_security_group.storage-gateway-sg.id}
      root_block_device:
        volume_size: ${var.size}
        volume_type: gp2
        encrypted: true
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_ebs_volume:
    cache-disk:
      availability_zone: ${aws_instance.storage-gw-server.availability_zone}
      size: ${var.cache_size}
      encrypted: true
      type: gp2
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_volume_attachment:
    disk-attach:
      device_name: /dev/xvdb
      volume_id: ${aws_ebs_volume.cache-disk.id}
      instance_id: ${aws_instance.storage-gw-server.id}
      force_detach: true
  aws_security_group:
    storage-gateway-sg:
      name: storage-gateway-sg
      vpc_id: ${data.aws_vpc.the_vpc.id}
      ingress:
        protocol: tcp
        from_port: 80
        to_port: 80
        cidr_blocks:
          0.0.0.0/0
        protocol: tcp
        from_port: 20048
        to_port: 20048
        cidr_blocks:
          0.0.0.0/0
        protocol: udp
        from_port: 20048
        to_port: 20048
        cidr_blocks:
          0.0.0.0/0
        protocol: tcp
        from_port: 22
        to_port: 22
        cidr_blocks:
          0.0.0.0/0
        protocol: tcp
        from_port: 111
        to_port: 111
        cidr_blocks:
          0.0.0.0/0
        protocol: udp
        from_port: 111
        to_port: 111
        cidr_blocks:
          0.0.0.0/0
        protocol: tcp
        from_port: 2049
        to_port: 2049
        cidr_blocks:
          0.0.0.0/0
        protocol: udp
        from_port: 2049
        to_port: 2049
        cidr_blocks:
          0.0.0.0/0
      egress:
        protocol: tcp
        from_port: 0
        to_port: 65535
        cidr_blocks:
          0.0.0.0/0
        protocol: udp
        from_port: 0
        to_port: 65535
        cidr_blocks:
          0.0.0.0/0
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_storagegateway_gateway:
    storage-gateway:
      gateway_ip_address: ${aws_instance.storage-gw-server.private_ip}
      gateway_name: storage-gateway
      gateway_timezone: GMT
      gateway_type: FILE_S3
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_storagegateway_cache:
    storage-gateway-cache:
      disk_id: ${data.aws_storagegateway_local_disk.storage-gateway-data.id}
      gateway_arn: ${aws_storagegateway_gateway.storage-gateway.arn}
  aws_storagegateway_nfs_file_share:
    nfs_share:
      client_list:
        0.0.0.0/0
      gateway_arn: ${aws_storagegateway_gateway.storage-gateway.arn}
      location_arn: ${aws_s3_bucket.transfer-bucket.arn}
      role_arn: ${aws_iam_role.transfer-role.arn}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_iam_role:
    transfer-role:
      name: transfer-role
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"storagegateway.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}"
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_iam_policy:
    transfer-policy-sg:
      name: transfer-policy-sg
      description: Allows access to storage gateway
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n    \"Action\": [\n      \"s3:GetAccelerateConfiguration\",\n      \"s3:GetBucketLocation\",\n      \"s3:GetBucketVersioning\",\n      \"s3:ListBucket\",\n      \"s3:ListBucketVersions\",\n      \"s3:ListBucketMultipartUploads\"\n    ],\n    \"Resource\": \"arn:aws:s3:::${aws_s3_bucket.transfer-bucket.bucket}\",\n    \"Effect\": \"Allow\"\n  },\n  {\n    \"Action\": [\n      \"s3:AbortMultipartUpload\",\n      \"s3:DeleteObject\",\n      \"s3:DeleteObjectVersion\",\n      \"s3:GetObject\",\n      \"s3:GetObjectAcl\",\n      \"s3:GetObjectVersion\",\n      \"s3:ListMultipartUploadParts\",\n      \"s3:PutObject\",\n      \"s3:PutObjectAcl\"\n    ],\n    \"Resource\": \"arn:aws:s3:::${aws_s3_bucket.transfer-bucket.bucket}/*\",\n    \"Effect\": \"Allow\"\n  }\n  ]\n}"
  aws_iam_policy_attachment:
    attach-policies:
      name: storageGW-attachment
      roles:
        ${aws_iam_role.transfer-role.name}
      policy_arn: ${aws_iam_policy.transfer-policy-sg.arn}
      depends_on:
        ${aws_iam_policy.transfer-policy-sg}
  aws_s3_bucket:
    transfer-bucket:
      bucket: ${var.s3_bucket}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_s3_bucket_server_side_encryption_configuration:
    transfer-bucket:
      bucket: ${aws_s3_bucket.transfer-bucket.id}
      rule:
        apply_server_side_encryption_by_default:
          sse_algorithm: AES256
