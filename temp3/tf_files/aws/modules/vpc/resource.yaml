---
resource:
  aws_vpc:
    main:
      cidr_block: ${var.vpc_cidr_block}
      enable_dns_hostnames: true
      tags:
        Name: ${var.vpc_name}
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes:
          ${tags}
  aws_flow_log:
    main:
      count: '${var.vpc_flow_logs ? 1 : 0}'
      iam_role_arn: ${aws_iam_role.flow_logs[count.index].arn}
      log_destination: ${aws_cloudwatch_log_group.main_log_group.arn}
      traffic_type: ${var.vpc_flow_traffic}
      vpc_id: ${aws_vpc.main.id}
  aws_iam_role:
    flow_logs:
      count: '${var.vpc_flow_logs ? 1 : 0}'
      name: ${var.vpc_name}_flow_logs_role
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"vpc-flow-logs.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}"
  aws_iam_role_policy:
    example:
      count: '${var.vpc_flow_logs ? 1 : 0}'
      name: ${var.vpc_name}_flow_logs_policy
      role: ${aws_iam_role.flow_logs[count.index].id}
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogGroups\",\n        \"logs:DescribeLogStreams\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}"
  aws_vpc_ipv4_cidr_block_association:
    secondary_cidr:
      count: '${var.secondary_cidr_block != "" ? 1 : 0}'
      vpc_id: ${aws_vpc.main.id}
      cidr_block: ${var.secondary_cidr_block}
  aws_internet_gateway:
    gw:
      vpc_id: ${aws_vpc.main.id}
      tags:
        Name: ${var.vpc_name}-igw
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_nat_gateway:
    nat_gw:
      allocation_id: ${aws_eip.nat_gw.id}
      subnet_id: ${aws_subnet.public.id}
      tags:
        Name: ${var.vpc_name}-ngw
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_route_table:
    public:
      vpc_id: ${aws_vpc.main.id}
      route:
        cidr_block: 0.0.0.0/0
        gateway_id: ${aws_internet_gateway.gw.id}
        cidr_block: ${var.peering_cidr}
        vpc_peering_connection_id: ${aws_vpc_peering_connection.vpcpeering.id}
      tags:
        Name: main
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${all}
  aws_eip:
    nat_gw:
      vpc: true
      tags:
        Name: ${var.vpc_name}-ngw-eip
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_default_route_table:
    default:
      default_route_table_id: ${aws_vpc.main.default_route_table_id}
      route:
        cidr_block: ${var.peering_cidr}
        vpc_peering_connection_id: ${aws_vpc_peering_connection.vpcpeering.id}
      tags:
        Name: default table
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_main_route_table_association:
    default:
      vpc_id: ${aws_vpc.main.id}
      route_table_id: ${aws_default_route_table.default.id}
  aws_route_table_association:
    public:
      subnet_id: ${aws_subnet.public.id}
      route_table_id: ${aws_route_table.public.id}
  aws_subnet:
    public:
      vpc_id: ${aws_vpc.main.id}
      cidr_block: '${var.network_expansion ? cidrsubnet(var.vpc_cidr_block, 5, 2) : cidrsubnet(var.vpc_cidr_block, 4, 0)}'
      map_public_ip_on_launch: true
      availability_zone: ${data.aws_availability_zones.available.names[1]}
      tags: '${tomap({"Name": "public", "Organization": "${var.organization_name}", "Environment": "${var.vpc_name}"})}'
      lifecycle:
        ignore_changes:
          ${tags}
          ${availability_zone}
  aws_cloudwatch_log_group:
    main_log_group:
      name: ${var.vpc_name}
      retention_in_days: ${var.commons_log_retention}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_cloudwatch_log_subscription_filter:
    csoc_subscription:
      count: '${var.csoc_managed && var.send_logs_to_csoc ? 1 : 0}'
      name: ${var.vpc_name}_subscription
      destination_arn: 'arn:aws:logs:${data.aws_region.current.name}:${var.csoc_managed ? var.csoc_account_id : data.aws_caller_identity.current.account_id}:destination:${var.vpc_name}_logs_destination'
      log_group_name: ${var.vpc_name}
      filter_pattern: ''
      lifecycle:
        ignore_changes:
          ${distribution}
  aws_route53_zone:
    main:
      name: internal.io
      comment: internal dns server for ${var.vpc_name}
      vpc:
        vpc_id: ${aws_vpc.main.id}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_vpc_peering_connection:
    vpcpeering:
      peer_owner_id: '${var.csoc_managed ? var.csoc_account_id : data.aws_caller_identity.current.account_id}'
      peer_vpc_id: ${var.peering_vpc_id}
      vpc_id: ${aws_vpc.main.id}
      auto_accept: false
      tags:
        Name: VPC Peering between ${var.vpc_name} and adminVM vpc
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${all}
  aws_route:
    default_csoc:
      count: '${var.csoc_managed ? 0 : 1}'
      route_table_id: ${data.aws_route_tables.control_routing_table[count.index].id}
      destination_cidr_block: ${var.vpc_cidr_block}
      vpc_peering_connection_id: ${aws_vpc_peering_connection.vpcpeering.id}
  aws_iam_user:
    es_user:
      name: ${var.vpc_name}_es_user
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_iam_access_key:
    es_user_key:
      user: ${aws_iam_user.es_user.name}
  aws_security_group:
    local:
      name: local
      description: security group that only allow internal tcp traffics
      vpc_id: ${aws_vpc.main.id}
      ingress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks: ${local.cidrs}
      egress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks: ${local.cidrs_no_peering}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
        Name: ${var.vpc_name}-local-sec-group
  aws_security_group:
    out:
      name: out
      description: security group that allow outbound traffics
      vpc_id: ${aws_vpc.main.id}
      egress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks:
          0.0.0.0/0
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
        Name: ${var.vpc_name}-outbound-traffic
  aws_security_group:
    proxy:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: squid-proxy
      description: allow inbound tcp at 3128
      vpc_id: ${aws_vpc.main.id}
      ingress:
        from_port: 0
        to_port: 3128
        protocol: TCP
        cidr_blocks: ${local.cidrs}
      tags:
        Environment: ${var.vpc_name}
        Organization: Basic Service
