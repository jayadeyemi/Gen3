---
resource:
  aws_s3_bucket:
    common_logging_bucket:
      bucket: ${var.common_name}-logging
      tags:
        Environment: ${var.common_name}
        Organization: Basic Services
  aws_s3_bucket_server_side_encryption_configuration:
    common_logging_bucket:
      bucket: ${aws_s3_bucket.common_logging_bucket.id}
      rule:
        apply_server_side_encryption_by_default:
          sse_algorithm: AES256
  aws_s3_bucket_lifecycle_configuration:
    common_logging_bucket:
      bucket: ${aws_s3_bucket.common_logging_bucket.id}
      rule:
        status: Enabled
        id: forwarded
        filter:
          and:
            prefix: forwarded*/
            tags:
              rule: log
              autoclean: 'true'
        transition:
          days: 60
          storage_class: STANDARD_IA
          days: 90
          storage_class: GLACIER
        expiration:
          days: 2190
  aws_s3_bucket_public_access_block:
    data_bucket_privacy:
      bucket: ${aws_s3_bucket.common_logging_bucket.id}
      block_public_acls: true
      block_public_policy: true
      ignore_public_acls: true
      restrict_public_buckets: true
  aws_kinesis_stream:
    common_stream:
      name: ${var.common_name}_stream
      shard_count: 1
      tags:
        Environment: ${var.common_name}
        Organization: Basic Services
  aws_iam_role:
    cwl_to_kinesis_role:
      name: ${var.common_name}_cwl_to_kinesis_role
      path: /
      assume_role_policy: "{\n  \"Version\": \"2008-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n      \"Service\": \"logs.${var.aws_region}.amazonaws.com\"\n    },\n    \"Action\": \"sts:AssumeRole\"\n  }\n}"
  aws_iam_role_policy:
    cwltok_policy:
      name: ${var.common_name}_cwltok_policy
      policy: ${data.aws_iam_policy_document.cwltok_policy_document.json}
      role: ${aws_iam_role.cwl_to_kinesis_role.id}
  aws_cloudwatch_log_destination:
    common_logs_destination:
      name: ${var.common_name}_logs_destination
      role_arn: ${aws_iam_role.cwl_to_kinesis_role.arn}
      target_arn: ${aws_kinesis_stream.common_stream.arn}
  aws_cloudwatch_log_destination_policy:
    common_logs_destination_policy:
      destination_name: ${aws_cloudwatch_log_destination.common_logs_destination.name}
      access_policy: ${data.aws_iam_policy_document.common_logs_destination_policy.json}
  aws_iam_role:
    firehose_role:
      name: ${var.common_name}_firehose_role
      path: /
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"firehose.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"sts:ExternalId\": \"${var.csoc_account_id}\"\n        }\n      }\n    }\n  ]\n}"
  aws_iam_role_policy:
    firehose_policy:
      name: ${var.common_name}_firehose_policy
      policy: ${data.aws_iam_policy_document.firehose_policy_document.json}
      role: ${aws_iam_role.firehose_role.id}
  aws_cloudwatch_log_group:
    csoc_common_log_group:
      name: ${var.common_name}
      retention_in_days: 3653
      tags:
        Environment: ${var.common_name}
        Organization: Basic Services
  aws_cloudwatch_log_stream:
    firehose_to_ES:
      name: firehose_to_ES
      log_group_name: ${aws_cloudwatch_log_group.csoc_common_log_group.name}
  aws_cloudwatch_log_stream:
    firehose_to_S3:
      name: firehose_to_S3
      log_group_name: ${aws_cloudwatch_log_group.csoc_common_log_group.name}
  aws_kinesis_firehose_delivery_stream:
    firehose_to_es:
      name: ${var.common_name}_firehose_to_es
      destination: elasticsearch
      s3_configuration:
        role_arn: ${aws_iam_role.firehose_role.arn}
        bucket_arn: ${aws_s3_bucket.common_logging_bucket.arn}
        buffer_size: 10
        buffer_interval: 400
      elasticsearch_configuration:
        domain_arn: arn:aws:es:${var.aws_region}:${var.csoc_account_id}:domain/${var.elasticsearch_domain}
        role_arn: ${aws_iam_role.firehose_role.arn}
        index_name: ${var.common_name}
        type_name: ${var.common_name}
        index_rotation_period: OneWeek
        cloudwatch_logging_options:
          enabled: true
          log_group_name: ${var.common_name}
          log_stream_name: firehose_to_ES
  aws_kinesis_firehose_delivery_stream:
    firehose_to_s3:
      name: ${var.common_name}_firehose_to_s3
      destination: s3
      s3_configuration:
        role_arn: ${aws_iam_role.firehose_role.arn}
        bucket_arn: ${aws_s3_bucket.common_logging_bucket.arn}
        prefix: forwarded_
        cloudwatch_logging_options:
          enabled: true
          log_group_name: ${var.common_name}
          log_stream_name: firehose_to_S3
  aws_iam_role:
    lambda_role:
      name: ${var.common_name}_lambda
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}"
  aws_iam_role_policy:
    lambda_policy:
      name: ${var.common_name}_lambda_policy
      policy: ${data.aws_iam_policy_document.lambda_policy_document.json}
      role: ${aws_iam_role.lambda_role.id}
  aws_lambda_event_source_mapping:
    event_source_mapping:
      batch_size: 100
      event_source_arn: ${aws_kinesis_stream.common_stream.arn}
      enabled: true
      function_name: ${aws_lambda_function.logs_decoding.arn}
      starting_position: TRIM_HORIZON
  aws_lambda_function:
    logs_decoding:
      filename: ${data.archive_file.lambda_function.output_path}
      function_name: ${var.common_name}_lambda_function
      role: ${aws_iam_role.lambda_role.arn}
      handler: lambda_function.handler
      source_code_hash: ${data.archive_file.lambda_function.output_base64sha256}
      description: Decode incoming log stream
      runtime: python3.6
      timeout: ${var.timeout}
      memory_size: ${var.memory_size}
      tracing_config:
        mode: PassThrough
      environment:
        variables:
          stream_name: ${var.common_name}_firehose
          threshold: ${var.threshold}
          slack_webhook: ${var.slack_webhook}
          s3: ${var.s3}
          es: ${var.es}
