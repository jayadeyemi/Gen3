---
resource:
  aws_iam_role:
    cluster_logging_cloudwatch:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}_cluster_logging_cloudwatch
      path: /
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n            },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n        }\n    ]\n}"
  aws_iam_role_policy:
    cluster_logging_cloudwatch:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}_cluster_logging_cloudwatch
      policy: ${data.aws_iam_policy_document.cluster_logging_cloudwatch.json}
      role: ${aws_iam_role.cluster_logging_cloudwatch.id}
  aws_iam_instance_profile:
    cluster_logging_cloudwatch:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}_cluster_logging_cloudwatch
      role: ${aws_iam_role.cluster_logging_cloudwatch.id}
  aws_ami_copy:
    squid_ami:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}-${data.aws_ami.public_squid_ami.name}-crypt
      description: An encrypted copy of ${data.aws_ami.public_squid_ami.name}
      source_ami_id: ${data.aws_ami.public_squid_ami.id}
      source_ami_region: ${var.ami_region}
      encrypted: true
      tags:
        Name: squid-${var.env_vpc_name}
      lifecycle:
        ignore_changes:
          source_ami_id
  aws_security_group:
    login-ssh:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}-squid-login-ssh
      description: security group that only enables ssh from VPC nodes and CSOC
      vpc_id: ${var.env_vpc_id}
      ingress:
        from_port: 22
        to_port: 22
        protocol: TCP
        cidr_blocks:
          ${var.env_vpc_cidr}
          ${var.csoc_cidr}
      tags:
        Environment: ${var.env_vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes:
          description
  aws_security_group:
    proxy:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}-squid-proxy
      description: allow inbound tcp at 3128
      vpc_id: ${var.env_vpc_id}
      ingress:
        from_port: 0
        to_port: 3128
        protocol: TCP
        cidr_blocks:
          ${var.env_vpc_cidr}
      tags:
        Environment: ${var.env_vpc_name}
        Organization: ${var.organization_name}
  aws_security_group:
    out:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: ${var.env_vpc_name}-squid-out
      description: security group that allow outbound traffics
      vpc_id: ${var.env_vpc_id}
      egress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks:
          0.0.0.0/0
      tags:
        Environment: ${var.env_vpc_name}
        Organization: ${var.organization_name}
  aws_route53_record:
    squid:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      zone_id: ${var.zone_id}
      name: cloud-proxy
      type: A
      ttl: '300'
      records:
        ${aws_instance.proxy.*.private_ip}
      lifecycle:
        ignore_changes:
          records
  aws_eip:
    squid:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      vpc: true
  aws_eip_association:
    squid_eip:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      instance_id: ${aws_instance.proxy.id}
      allocation_id: ${aws_eip.squid.id}
  aws_instance:
    proxy:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      ami: ${aws_ami_copy.squid_ami.id}
      subnet_id: ${var.env_public_subnet_id}
      instance_type: ${var.instance_type}
      monitoring: true
      source_dest_check: false
      key_name: ${var.ssh_key_name}
      vpc_security_group_ids:
        ${aws_security_group.proxy.id}
        ${aws_security_group.login-ssh.id}
        ${aws_security_group.out.id}
      iam_instance_profile: ${aws_iam_instance_profile.cluster_logging_cloudwatch.name}
      tags:
        Name: ${var.env_vpc_name} HTTP Proxy
        Environment: ${var.env_vpc_name}
        Organization: ${var.organization_name}
      user_data: "#!/bin/bash\necho '127.0.1.1 ${var.env_vpc_name}_squid_proxy' | sudo tee --append /etc/hosts\nsudo hostnamectl set-hostname ${var.env_vpc_name}_squid_proxy\n\nsed -i 's/SERVER/http_proxy-auth-{hostname}-{instance_id}/g' /var/awslogs/etc/awslogs.conf\nsed -i 's/VPC/'${var.env_log_group}'/g' /var/awslogs/etc/awslogs.conf\ncat >> /var/awslogs/etc/awslogs.conf <<EOM\n[syslog]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/syslog\nlog_stream_name = http_proxy-syslog-{hostname}-{instance_id}\ntime_zone = LOCAL\nlog_group_name = ${var.env_log_group}\n[squid/access.log]\nfile = /var/log/squid/access.log*\nlog_stream_name = http_proxy-squid_access-{hostname}-{instance_id}\nlog_group_name = ${var.env_log_group}\nEOM\n\nchmod 755 /etc/init.d/awslogs\nsystemctl enable awslogs\nsystemctl restart awslogs"
      lifecycle:
        ignore_changes:
          ami
          key_name
        create_before_destroy: true
