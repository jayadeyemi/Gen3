---
resource:
  aws_subnet:
    squid_pub0:
      count: '${var.deploy_ha_squid ? length(var.squid_availability_zones) : 0}'
      vpc_id: ${var.env_vpc_id}
      cidr_block: '${var.network_expansion ? cidrsubnet(var.squid_proxy_subnet,2,count.index) : cidrsubnet(var.squid_proxy_subnet,3,count.index )}'
      availability_zone: ${var.squid_availability_zones[count.index]}
      tags: ${map("Name", "${var.env_squid_name}_pub${count.index}", "Organization", var.organization_name, "Environment", var.env_squid_name)}
  aws_iam_role:
    squid-auto_role:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name: ${var.env_squid_name}_role
      path: /
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n            },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n        }\n    ]\n}"
  aws_iam_role_policy:
    squid_policy:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name: ${var.env_squid_name}_policy
      policy: ${data.aws_iam_policy_document.squid_policy_document.json}
      role: ${aws_iam_role.squid-auto_role.id}
  aws_iam_role_policy_attachment:
    eks-policy-AmazonSSMManagedInstanceCore:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      role: ${aws_iam_role.squid-auto_role.id}
  aws_iam_instance_profile:
    squid-auto_role_profile:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name: ${var.env_vpc_name}_squid-auto_role_profile
      role: ${aws_iam_role.squid-auto_role.id}
  aws_route_table_association:
    squid_auto0:
      count: '${var.deploy_ha_squid ? length(var.squid_availability_zones) : 0}'
      subnet_id: ${aws_subnet.squid_pub0.*.id[count.index]}
      route_table_id: ${var.main_public_route}
  aws_launch_configuration:
    squid_auto:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name_prefix: ${var.env_squid_name}_autoscaling_launch_config
      image_id: ${data.aws_ami.public_squid_ami.id}
      instance_type: ${var.squid_instance_type}
      security_groups:
        ${aws_security_group.squidauto_in.id}
        ${aws_security_group.squidauto_out.id}
      key_name: ${var.ssh_key_name}
      iam_instance_profile: ${aws_iam_instance_profile.squid-auto_role_profile.id}
      associate_public_ip_address: true
      root_block_device:
        volume_size: ${var.squid_instance_drive_size}
      user_data: "#!/bin/bash\nDISTRO=$(awk -F '[=\"]*' '/^NAME/ { print $2 }' < /etc/os-release)\nUSER=\"ubuntu\"\nif [[ $DISTRO == \"Amazon Linux\" ]]; then\n  USER=\"ec2-user\"\nfi\nUSER_HOME=\"/home/$USER\"\nCLOUD_AUTOMATION=\"$USER_HOME/cloud-automation\"\n(\n  cd $USER_HOME\n  if [[ ! -z \"${var.slack_webhook}\" ]]; then\n    echo \"${var.slack_webhook}\" > /slackWebhook\n  fi\n  if [[ $DISTRO == \"Amazon Linux\" ]]; then\n    sudo yum update -y\n    sudo yum install git lsof -y\n  fi\n  git clone https://github.com/uc-cdis/cloud-automation.git\n  cd $CLOUD_AUTOMATION\n  git pull\n\n  # This is needed temporarily for testing purposes ; before merging the code to master\n  if [ \"${var.branch}\" != \"master\" ];\n  then\n    git checkout \"${var.branch}\"\n    git pull\n  fi\n  chown -R $USER. $CLOUD_AUTOMATION\n\n  echo \"127.0.1.1 ${var.env_squid_name}\" | tee --append /etc/hosts\n  hostnamectl set-hostname ${var.env_squid_name}\n  if [[ $DISTRO == \"Ubuntu\" ]]; then\n    apt -y update\n    DEBIAN_FRONTEND='noninteractive' apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade\n\n    apt autoremove -y\n    apt clean\n    apt autoclean\n  fi\n  cd $USER_HOME\n\n  bash \"${var.bootstrap_path}${var.bootstrap_script}\" \"cwl_group=${var.env_log_group};${join(\";\",var.extra_vars)}\" 2>&1\n  cd $CLOUD_AUTOMATION\n  git checkout master\n  # Install qualys agent if the activtion and customer id provided\n  # Amazon Linux does not support qualys agent (?)\n  # https://success.qualys.com/discussions/s/question/0D52L00004TnwvgSAB/installing-qualys-cloud-agent-on-amazon-linux-2-instances\n  if [[ $DISTRO == \"Ubuntu\" ]]; then\n    if [[ ! -z \"${var.activation_id}\" ]] || [[ ! -z \"${var.customer_id}\" ]]; then\n      apt install awscli jq -y\n      aws s3 cp s3://qualys-agentpackage/QualysCloudAgent.deb ./qualys-cloud-agent.x86_64.deb\n      dpkg -i ./qualys-cloud-agent.x86_64.deb\n      # Clean up deb package after install\n      rm qualys-cloud-agent.x86_64.deb\n      sudo /usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh ActivationId=${var.activation_id} CustomerId=${var.customer_id}\n    fi\n  fi\n) > /var/log/bootstrapping_script.log"
      lifecycle:
        create_before_destroy: true
      depends_on:
        aws_iam_instance_profile.squid-auto_role_profile
  null_resource:
    service_depends_on:
      triggers:
        deps: ${jsonencode(var.squid_depends_on)}
  aws_iam_service_linked_role:
    squidautoscaling:
      aws_service_name: autoscaling.amazonaws.com
      custom_suffix: ${var.env_vpc_name}_squid
      lifecycle:
        ignore_changes:
          custom_suffix
  aws_kms_grant:
    kms:
      count: '${var.fips ? 1 : 0}'
      name: kms-cmk-eks
      key_id: ${var.fips_ami_kms}
      grantee_principal: ${aws_iam_service_linked_role.squidautoscaling.arn}
      operations:
        Encrypt
        Decrypt
        ReEncryptFrom
        ReEncryptTo
        GenerateDataKey
        GenerateDataKeyWithoutPlaintext
        DescribeKey
        CreateGrant
  aws_autoscaling_group:
    squid_auto:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name: ${var.env_squid_name}
      service_linked_role_arn: ${aws_iam_service_linked_role.squidautoscaling.arn}
      desired_capacity: ${var.cluster_desired_capasity}
      max_size: ${var.cluster_max_size}
      min_size: ${var.cluster_min_size}
      vpc_zone_identifier:
        ${aws_subnet.squid_pub0.*.id}
      launch_configuration: ${aws_launch_configuration.squid_auto.name}
      depends_on:
        null_resource.service_depends_on
        aws_route_table_association.squid_auto0
      tag:
        key: Name
        value: ${var.env_squid_name}-grp-member
        propagate_at_launch: true
        key: Environment
        value: ${var.organization_name}
        propagate_at_launch: true
  aws_security_group:
    squidauto_in:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name: ${var.env_squid_name}-squidauto_in
      description: security group that only enables ssh from VPC nodes and CSOC
      vpc_id: ${var.env_vpc_id}
      ingress:
        from_port: 22
        to_port: 22
        protocol: TCP
        cidr_blocks:
          ${local.cidrs}
        from_port: 3128
        to_port: 3128
        protocol: TCP
        cidr_blocks:
          ${local.cidrs}
        from_port: 80
        to_port: 80
        protocol: TCP
        cidr_blocks:
          ${local.cidrs2}
        from_port: 443
        to_port: 443
        protocol: TCP
        cidr_blocks:
          ${local.cidrs2}
      tags:
        Environment: ${var.env_squid_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes:
          description
  aws_security_group:
    squidauto_out:
      count: '${var.deploy_ha_squid ? 1 : 0}'
      name: ${var.env_squid_name}-squidauto_out
      description: security group that allow outbound traffics
      vpc_id: ${var.env_vpc_id}
      egress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks:
          0.0.0.0/0
      tags:
        Environment: ${var.env_squid_name}
        Organization: ${var.organization_name}
