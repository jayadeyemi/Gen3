---
resource:
  - aws_security_group:
    all_out:
      name: all_out
      description: security group that allow outbound traffics
      vpc_id: ${module.vpc.vpc_id}
      egress:
        - from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks:
          - 0.0.0.0/0
      tags:
        Environment: ${local.environment}
        Organization: gen3
  - aws_security_group:
    web_in:
      name: web_in
      description: allow inbound 80 and 443
      vpc_id: ${module.vpc.vpc_id}
      ingress:
        - from_port: 443
        to_port: 443
        protocol: TCP
        cidr_blocks:
          - 0.0.0.0/0
        - from_port: 80
        to_port: 80
        protocol: TCP
        cidr_blocks:
          - 0.0.0.0/0
      tags:
        Environment: ${local.environment}
        Organization: gen3
  - aws_security_group:
    ssh_in:
      name: ssh_in
      description: allow inbound 22
      vpc_id: ${module.vpc.vpc_id}
      ingress:
        - from_port: 22
        to_port: 22
        protocol: TCP
        cidr_blocks:
          - 0.0.0.0/0
      tags:
        Environment: ${local.environment}
        Organization: gen3
  - aws_key_pair:
    automation_dev:
      key_name: ${local.environment}_automation_dev
      public_key: ${var.ssh_public_key}
  - aws_instance:
    cluster:
      count: ${var.instance_count}
      ami: ${data.aws_ami.ubuntu.id}
      instance_type: ${var.instance_type}
      key_name: ${aws_key_pair.automation_dev.key_name}
      monitoring: false
      vpc_security_group_ids:
        - ${aws_security_group.all_out.id}
        - ${aws_security_group.ssh_in.id}
        - ${aws_security_group.web_in.id}
      subnet_id: ${module.vpc.public_subnets[count.index % 3]}
      root_block_device:
        - volume_size: 50
      user_data: "#!/bin/bash \n\n(\n  export DEBIAN_FRONTEND=noninteractive\n    \n  if which hostnamectl > /dev/null; then\n    hostnamectl set-hostname 'lab${count.index}'\n  fi\n  mkdir -p -m 0755 /var/lib/gen3\n  cd /var/lib/gen3\n  if ! which git > /dev/null; then\n    apt update\n    apt install git -y\n  fi\n  git clone https://github.com/uc-cdis/cloud-automation.git \n  cd ./cloud-automation\n  if [[ ! -d ./Chef ]]; then\n    # until the code gets merged\n    git checkout chore/labvm\n  fi\n  cd ./Chef\n  bash ./installClient.sh\n  # hopefully chef-client is ready to run now\n  cd ./repo\n  /bin/rm -rf nodes\n  # add -l debug for more verbose logging\n  chef-client --local-mode --node-name littlenode --override-runlist 'role[labvm]'\n) 2>&1 | tee /var/log/gen3boot.log"
      lifecycle:
        - ignore_changes:
          - private_ip
          - root_block_device
          - ebs_block_device
          - user_data
      tags:
        Name: ${local.environment}${count.index}
        Terraform: 'true'
        Environment: ${local.environment}
  - aws_eip:
    ips:
      count: ${var.instance_count}
      instance: ${aws_instance.cluster.*.id[count.index]}
      vpc: true
