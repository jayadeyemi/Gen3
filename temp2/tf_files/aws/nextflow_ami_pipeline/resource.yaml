---
resource:
  - aws_iam_role:
    image_builder:
      name: ${var.pipeline_name}-image-builder-role
      assume_role_policy: ${data.aws_iam_policy_document.assume_role.json}
  - aws_iam_role_policy_attachment:
    amazon_ssm:
      role: ${aws_iam_role.image_builder.name}
      policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  - aws_iam_role_policy_attachment:
    image_builder:
      role: ${aws_iam_role.image_builder.name}
      policy_arn: arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
  - aws_iam_role_policy_attachment:
    image_builder_ecr:
      role: ${aws_iam_role.image_builder.name}
      policy_arn: arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
  - aws_iam_instance_profile:
    image_builder:
      name: ${var.pipeline_name}-image-builder-profile
      role: ${aws_iam_role.image_builder.name}
  - aws_imagebuilder_component:
    install_software:
      name: ${var.pipeline_name}-InstallSoftware
      platform: Linux
      version: 1.0.0
      data: "${yamlencode({\"name\": \"InstallSoftware\", \"description\": \"Installs bzip2, wget, Miniconda3 and awscli\", \"schemaVersion\": 1.0, \"phases\": [{\"name\": \"build\", \"steps\": [{\"name\": \"InstallPackages\", \"action\": \"ExecuteBash\", \"inputs\": {\"commands\": [\"sudo yum install -y bzip2 wget\"]}}, {\"name\": \"InstallMiniconda\", \"action\": \"ExecuteBash\", \"inputs\": {\"commands\": [\"sudo su ec2-user\", \"mkdir -p /home/ec2-user\", \"export HOME=/home/ec2-user/\", \"cd $HOME\", \"# Download and install miniconda in ec2-user's home dir\", \"wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda-install.sh\", \"bash miniconda-install.sh -b -f -p /home/ec2-user/miniconda\", \"rm miniconda-install.sh\"]}}, {\"name\": \"InstallAWSCLI\", \"action\": \"ExecuteBash\", \"inputs\": {\"commands\": [\"export HOME=/home/ec2-user/\", \"/home/ec2-user/miniconda/bin/conda install -c conda-forge -y awscli\"]}}]}, {\"name\": \"validate\", \"steps\": [{\"name\": \"CheckInstalls\", \"action\": \"ExecuteBash\", \"inputs\": {\"commands\": [\"which bzip2\", \"which wget\", \"which conda\", \"/home/ec2-user/miniconda/bin/conda list | grep awscli\"]}}]}, {\"name\": \"test\", \"steps\": [{\"name\": \"TestAWSCLI\", \"action\": \"ExecuteBash\", \"inputs\": {\"commands\": [\"/home/ec2-user/miniconda/bin/aws --version\"]}}]}]})}"
  - aws_imagebuilder_infrastructure_configuration:
    image_builder:
      name: ${var.pipeline_name}-infra-config
      instance_profile_name: ${aws_iam_instance_profile.image_builder.name}
      security_group_ids:
        - ${data.aws_security_group.default.id}
      subnet_id: ${data.aws_subnet.private.id}
      terminate_instance_on_failure: true
  - aws_imagebuilder_distribution_configuration:
    public_ami:
      name: ${var.pipeline_name}-dist-config
      distribution:
        - ami_distribution_configuration:
          - name: ${var.public_ami_name}
          ami_tags:
            Role: Public Image
          launch_permission:
            - user_groups:
              - all
        region: us-east-1
  - aws_imagebuilder_image_recipe:
    recipe:
      name: ${var.pipeline_name}-recipe
      parent_image: '${var.enable_ssm_fetch ? data.aws_ssm_parameter.ecs_optimized_ami_id[0].value : var.base_image}'
      version: 1.0.0
      block_device_mapping:
        - device_name: /dev/xvda
        ebs:
          - delete_on_termination: true
          volume_size: 30
          volume_type: gp2
          encrypted: false
      user_data_base64: ${try(base64encode(var.user_data), null)}
      component:
        - component_arn: arn:aws:imagebuilder:us-east-1:aws:component/docker-ce-linux/1.0.0/1
        - component_arn: ${aws_imagebuilder_component.install_software.arn}
  - aws_imagebuilder_image_pipeline:
    nextflow:
      image_recipe_arn: ${aws_imagebuilder_image_recipe.recipe.arn}
      infrastructure_configuration_arn: ${aws_imagebuilder_infrastructure_configuration.image_builder.arn}
      name: ${var.pipeline_name}
      distribution_configuration_arn: ${aws_imagebuilder_distribution_configuration.public_ami.arn}
      image_scanning_configuration:
        - image_scanning_enabled: ${var.image_scanning_enabled}
