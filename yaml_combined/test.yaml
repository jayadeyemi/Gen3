module:
  aws_waf:
    source: ../modules/waf
    count: '${var.deploy_waf ? 1 : 0}'
    vpc_name: ${var.vpc_name}
    base_rules: ${var.base_rules}
    additional_rules: ${var.additional_rules}
    depends_on: ${module.cdis_vpc.vpc_id} ${module.cdis_vpc.vpc_peering_id}
  cdis_vpc:
    source: ../modules/vpc
    ami_account_id: ${var.ami_account_id}
    squid_image_search_criteria: ${var.squid_image_search_criteria}
    vpc_cidr_block: ${var.vpc_cidr_block}
    secondary_cidr_block: ${var.secondary_cidr_block}
    vpc_name: ${var.vpc_name}
    ssh_key_name: ${aws_key_pair.automation_dev.key_name}
    peering_cidr: ${var.peering_cidr}
    csoc_account_id: ${var.csoc_account_id}
    organization_name: ${var.organization_name}
    csoc_managed: ${var.csoc_managed}
    peering_vpc_id: ${var.peering_vpc_id}
    vpc_flow_logs: ${var.vpc_flow_logs}
    vpc_flow_traffic: ${var.vpc_flow_traffic}
    branch: ${var.branch}
    fence-bot_bucket_access_arns: ${var.fence-bot_bucket_access_arns}
    deploy_ha_squid: ${var.deploy_ha_squid}
    deploy_single_proxy: ${var.deploy_single_proxy}
    squid_cluster_desired_capasity: ${var.ha-squid_cluster_desired_capasity}
    squid_cluster_min_size: ${var.ha-squid_cluster_min_size}
    squid_cluster_max_size: ${var.ha-squid_cluster_max_size}
    squid_instance_type: ${var.ha-squid_instance_type}
    squid_instance_drive_size: ${var.ha-squid_instance_drive_size}
    squid_bootstrap_script: ${var.ha-squid_bootstrap_script}
    squid_extra_vars: ${var.ha-squid_extra_vars}
    single_squid_instance_type: ${var.single_squid_instance_type}
    fips: ${var.fips}
    network_expansion: ${var.network_expansion}
    activation_id: ${var.activation_id}
    customer_id: ${var.customer_id}
    slack_webhook: ${var.slack_webhook}
    deploy_cloud_trail: ${var.deploy_cloud_trail}
    send_logs_to_csoc: ${var.send_logs_to_csoc}
    commons_log_retention: ${var.commons_log_retention}
  commons_vpc_es:
    source: ../modules/commons-vpc-es
    count: '${var.deploy_es ? 1 : 0}'
    vpc_name: ${var.vpc_name}
    vpc_id: ${module.cdis_vpc.vpc_id}
    instance_type: ${var.es_instance_type}
    ebs_volume_size_gb: ${var.ebs_volume_size_gb}
    encryption: ${var.encryption}
    instance_count: ${var.es_instance_count}
    organization_name: ${var.organization_name}
    es_version: ${var.es_version}
    es_linked_role: ${var.es_linked_role}
    es_name: ${var.es_name}
    role_arn: '${var.deploy_es_role ? aws_iam_role.esproxy-role[0].arn : ""}'
    depends_on: ${module.cdis_vpc.vpc_id} ${module.cdis_vpc.vpc_peering_id}
  config_files:
    source: ../../shared/modules/k8s_configs
    vpc_name: ${var.vpc_name}
    db_fence_address: ${local.db_fence_address}
    db_fence_password: '${var.db_password_fence != "" ? var.db_password_fence : random_password.fence_password.result}'
    db_fence_name: ${var.fence_database_name}
    db_sheepdog_address: ${local.db_sheepdog_address}
    db_sheepdog_username: ${var.sheepdog_db_username}
    db_sheepdog_password: '${var.db_password_sheepdog != "" ? var.db_password_sheepdog
      : random_password.sheepdog_password.result}'
    db_sheepdog_name: ${var.sheepdog_database_name}
    db_peregrine_address: ${local.db_peregrine_address}
    db_peregrine_password: '${var.db_password_peregrine != "" ? var.db_password_peregrine
      : random_password.peregrine_password.result}'
    db_indexd_address: ${local.db_indexd_address}
    db_indexd_username: ${var.indexd_db_username}
    db_indexd_password: '${var.db_password_indexd != "" ? var.db_password_indexd :
      random_password.indexd_password.result}'
    db_indexd_name: ${var.indexd_database_name}
    hostname: ${var.hostname}
    google_client_secret: ${var.google_client_secret}
    google_client_id: ${var.google_client_id}
    hmac_encryption_key: '${var.hmac_encryption_key != "" ? var.hmac_encryption_key
      : base64encode(random_password.hmac_encryption_key.result)}'
    sheepdog_secret_key: '${var.sheepdog_secret_key != "" ? var.sheepdog_secret_key
      : random_password.sheepdog_secret_key.result}'
    sheepdog_indexd_password: '${var.sheepdog_indexd_password != "" ? var.sheepdog_indexd_password
      : random_password.sheepdog_indexd_password.result}'
    sheepdog_oauth2_client_id: ${var.sheepdog_oauth2_client_id}
    sheepdog_oauth2_client_secret: ${var.sheepdog_oauth2_client_secret}
    gitops_path: ${var.gitops_path}
    ssl_certificate_id: ${var.aws_cert_name}
    aws_user_key: ${module.cdis_vpc.es_user_key}
    aws_user_key_id: ${module.cdis_vpc.es_user_key_id}
    indexd_prefix: ${var.indexd_prefix}
    mailgun_api_key: ${var.mailgun_api_key}
    mailgun_api_url: ${var.mailgun_api_url}
    mailgun_smtp_host: ${var.mailgun_smtp_host}
  csoc_peering_connection:
    source: ../modules/csoc_peering
    count: '${var.csoc_peering ? 1 : 0}'
    vpc_name: ${var.vpc_name}
    route_table_name: ${var.route_table_name}
    csoc_vpc_id: ${var.peering_vpc_id}
    csoc_cidr: ${var.peering_cidr}
    organization_name: ${var.organization_name}
    vpc_cidr_block: ${var.vpc_cidr_block}
    pcx_id: ${module.cdis_vpc.vpc_peering_id}
    providers:
      aws: ${aws.csoc}
  gen3_deployment:
    source: ../../gen3
    count: '${var.deploy_gen3 && var.deploy_aurora ? 1 : 0}'
    aurora_password: ${module.aurora[0].aurora_cluster_master_password}
    aurora_hostname: ${module.aurora[0].aurora_cluster_writer_endpoint}
    aurora_username: ${module.aurora[0].aurora_cluster_master_username}
    cluster_endpoint: ${module.eks[0].cluster_endpoint}
    cluster_ca_cert: ${module.eks[0].cluster_certificate_authority_data}
    cluster_name: ${module.eks[0].cluster_name}
    ambassador_enabled: ${var.ambassador_enabled}
    arborist_enabled: ${var.arborist_enabled}
    argo_enabled: ${var.argo_enabled}
    audit_enabled: ${var.audit_enabled}
    aws-es-proxy_enabled: ${var.aws-es-proxy_enabled}
    dbgap_enabled: ${var.dbgap_enabled}
    dd_enabled: ${var.dd_enabled}
    dictionary_url: ${var.dictionary_url}
    dispatcher_job_number: ${var.dispatcher_job_number}
    fence_enabled: ${var.fence_enabled}
    guppy_enabled: ${var.guppy_enabled}
    hatchery_enabled: ${var.hatchery_enabled}
    hostname: ${var.hostname}
    indexd_enabled: ${var.indexd_enabled}
    indexd_prefix: ${var.indexd_prefix}
    ingress_enabled: ${var.ingress_enabled}
    manifestservice_enabled: ${var.manifestservice_enabled}
    metadata_enabled: ${var.metadata_enabled}
    netpolicy_enabled: ${var.netpolicy_enabled}
    peregrine_enabled: ${var.peregrine_enabled}
    pidgin_enabled: ${var.pidgin_enabled}
    portal_enabled: ${var.portal_enabled}
    public_datasets: ${var.public_datasets}
    requestor_enabled: ${var.requestor_enabled}
    revproxy_arn: ${var.revproxy_arn}
    revproxy_enabled: ${var.revproxy_enabled}
    sheepdog_enabled: ${var.sheepdog_enabled}
    slack_send_dbgap: ${var.slack_send_dbgap}
    slack_webhook: ${var.slack_webhook}
    ssjdispatcher_enabled: ${var.ssjdispatcher_enabled}
    tier_access_level: ${var.tier_access_level}
    tier_access_limit: ${var.tier_access_limit}
    usersync_enabled: ${var.usersync_enabled}
    usersync_schedule: ${var.usersync_schedule}
    useryaml_s3_path: ${var.useryaml_s3_path}
    wts_enabled: ${var.wts_enabled}
    fence_config_path: ${var.fence_config_path}
    useryaml_path: ${var.useryaml_path}
    gitops_path: ${var.gitops_path}
    google_client_id: ${var.google_client_id}
    google_client_secret: ${var.google_client_secret}
    fence_access_key: ${var.fence_access_key}
    fence_secret_key: ${var.fence_secret_key}
    upload_bucket: ${var.upload_bucket}
    namespace: ${var.namespace}
  data-bucket:
    source: ../upload-data-bucket
    vpc_name: ${var.vpc_name}
    cloudwatchlogs_group: ${aws_cloudwatch_log_group.main_log_group.arn}
    environment: ${var.vpc_name}
    deploy_cloud_trail: ${var.deploy_cloud_trail}
  fence-bot-user:
    source: ../fence-bot-user
    vpc_name: ${var.vpc_name}
    bucket_name: ${module.data-bucket.data-bucket_name}
    bucket_access_arns: ${var.fence-bot_bucket_access_arns}
  squid-auto:
    source: ../squid_auto
    peering_cidr: ${var.peering_cidr}
    secondary_cidr_block: ${var.secondary_cidr_block}
    env_vpc_name: ${var.vpc_name}
    env_vpc_cidr: ${aws_vpc.main.cidr_block}
    env_vpc_id: ${aws_vpc.main.id}
    env_log_group: ${aws_cloudwatch_log_group.main_log_group.name}
    env_squid_name: squid-auto-${var.vpc_name}
    squid_proxy_subnet: '${var.network_expansion ? cidrsubnet(var.vpc_cidr_block,
      5, 3) : cidrsubnet(var.vpc_cidr_block, 4, 1)}'
    organization_name: ${var.organization_name}
    ssh_key_name: ${var.ssh_key_name}
    ami_account_id: ${var.ami_account_id}
    image_name_search_criteria: ${var.squid_image_search_criteria}
    squid_instance_drive_size: ${var.squid_instance_drive_size}
    squid_availability_zones: ${var.availability_zones}
    main_public_route: ${aws_route_table.public.id}
    route_53_zone_id: ${aws_route53_zone.main.id}
    squid_instance_type: ${var.squid_instance_type}
    bootstrap_script: ${var.squid_bootstrap_script}
    extra_vars: ${var.squid_extra_vars}
    branch: ${var.branch}
    cluster_max_size: ${var.squid_cluster_max_size}
    cluster_min_size: ${var.squid_cluster_min_size}
    cluster_desired_capasity: ${var.squid_cluster_desired_capasity}
    network_expansion: ${var.network_expansion}
    squid_depends_on: ${aws_nat_gateway.nat_gw.id}
    activation_id: ${var.activation_id}
    customer_id: ${var.customer_id}
    slack_webhook: ${var.slack_webhook}
    fips: ${var.fips}
  cloud-trail:
    count: '${var.deploy_cloud_trail ? 1 : 0}'
    source: ../cloud-trail
    vpc_name: ${var.vpc_name}
    environment: ${var.environment}
    cloudwatchlogs_group: ${var.cloudwatchlogs_group}
    bucket_arn: ${aws_s3_bucket.data_bucket.arn}
    bucket_id: ${aws_s3_bucket.log_bucket.id}
  data-bucket-queue:
    source: ../data-bucket-queue
    bucket_name: ${aws_s3_bucket.data_bucket.id}
    configure_bucket_notifications: false
  arborist-db:
    count: '${var.arborist_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: arborist
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  argo-db:
    count: '${var.argo_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: argo
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  audit-db:
    count: '${var.audit_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: audit
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  audit-sqs:
    source: ../aws/modules/sqs
    sqs_name: audit
  dicom-server-db:
    count: '${var.dicom-server_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: dicom-server
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  dicom-viewer-db:
    count: '${var.dicom-viewer_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: dicom
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  fence-db:
    count: '${var.fence_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: fence
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  grafana-s3-bucket:
    count: '${var.namespace == "default" && var.deploy_grafana ? 1 : 0}'
    source: ../aws/modules/generic-bucket
    bucket_name: ${var.vpc_name}-observability-bucket
  indexd-db:
    count: '${var.indexd_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: indexd
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  manifest-s3-bucket:
    source: ../aws/modules/generic-bucket
    bucket_name: manifestservice-${var.vpc_name}-${var.namespace}
  metadata-db:
    count: '${var.metadata_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: metadata
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  requestor-db:
    count: '${var.requestor_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: requestor
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  sheepdog-db:
    count: '${var.sheepdog_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: sheepdog
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  ssjdispatcher-sqs:
    source: ../aws/modules/sqs
    sqs_name: ssjdispatcher
  wts-db:
    count: '${var.wts_enabled ? 1 : 0}'
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
    service: wts
    admin_database_username: ${var.aurora_username}
    admin_database_password: ${var.aurora_password}
    namespace: ${var.namespace}
    secrets_manager_enabled: true
  secrets_manager:
    count: '${var.secrets_manager_enabled ? 1 : 0}'
    source: ../modules/secrets_manager
    vpc_name: ${var.vpc_name}
    secret: '${templatefile("${path.module}/secrets_manager.tftpl", {"hostname": "${data.aws_db_instance.database.address}",
      "database": "${local.database_name}", "username": "${local.database_username}",
      "password": "${local.database_password}"})}'
    secret_name: ${var.namespace}-${var.service}-creds
    depends_on: ${null_resource.user_setup}
locals:
  db_fence_address: '${var.deploy_aurora ? module.aurora[0].aurora_cluster_writer_endpoint
    : var.deploy_fence_db && var.deploy_rds ? aws_db_instance.db_fence[0].address
    : ""}'
  db_indexd_address: '${var.deploy_aurora ? module.aurora[0].aurora_cluster_writer_endpoint
    : var.deploy_indexd_db && var.deploy_rds ? aws_db_instance.db_indexd[0].address
    : ""}'
  db_sheepdog_address: '${var.deploy_aurora ? module.aurora[0].aurora_cluster_writer_endpoint
    : var.deploy_sheepdog_db && var.deploy_rds ? aws_db_instance.db_sheepdog[0].address
    : ""}'
  db_peregrine_address: '${var.deploy_aurora ? module.aurora[0].aurora_cluster_writer_endpoint
    : var.deploy_sheepdog_db && var.deploy_rds ? aws_db_instance.db_sheepdog[0].address
    : ""}'
  pg_family_version: ${replace(var.engine_version, "/\\.[0-9]/", "")}
  cluster_name: ${replace(var.vpc_name, "-", "")}
  cidrs: '${var.secondary_cidr_block != "" ? [''${var.env_vpc_cidr}'', ''${var.peering_cidr}'',
    ''${var.secondary_cidr_block}''] : [''${var.env_vpc_cidr}'', ''${var.peering_cidr}'']}'
  cidrs_no_peering: '${var.secondary_cidr_block != "" ? [''${var.vpc_cidr_block}'',
    ''${var.secondary_cidr_block}''] : [''${var.vpc_cidr_block}'']}'
  cidrs2: '${var.secondary_cidr_block != "" ? [''${var.env_vpc_cidr}'', ''${var.secondary_cidr_block}'']
    : [''${var.env_vpc_cidr}'']}'
  vpc_id: '${var.vpc_id != "" ? var.vpc_id : data.aws_vpc.the_vpc.id}'
  es_policy: '${var.role_arn == "" ? local.policy1 : local.policy2}'
  policy1: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n\
    \            \"Action\": \"es:*\",\n            \"Principal\": {\n           \
    \   \"AWS\": [\n                \"${data.aws_iam_user.es_user.arn}\"\n       \
    \       ]\n            },\n            \"Effect\": \"Allow\",\n            \"\
    Resource\": \"*\"\n        }\n    ]\n}"
  policy2: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n\
    \            \"Action\": \"es:*\",\n            \"Principal\": {\n           \
    \   \"AWS\": [\n                \"${data.aws_iam_user.es_user.arn}\",\n      \
    \          \"${var.role_arn}\"\n              ]\n            },\n            \"\
    Effect\": \"Allow\",\n            \"Resource\": \"*\"\n        }\n    ]\n}"
  all_cidr_blocks: '${[for assoc in data.aws_vpc.the_vpc.cidr_block_associations :
    assoc.cidr_block]}'
  values: '${templatefile("${path.module}/values.tftpl", {"account_id": "${data.aws_caller_identity.current.account_id}",
    "namespace": "${var.namespace}", "ambassador_enabled": "${var.ambassador_enabled}",
    "arborist_enabled": "${var.arborist_enabled}", "argo_enabled": "${var.argo_enabled}",
    "audit_enabled": "${var.audit_enabled}", "audit_service_account": "${aws_iam_role.audit-role[0].arn}",
    "aurora_hostname": "${var.aurora_hostname}", "aurora_username": "${var.aurora_username}",
    "aurora_password": "${var.aurora_password}", "aws-es-proxy_enabled": "${var.aws-es-proxy_enabled}",
    "dbgap_enabled": "${var.dbgap_enabled}", "dd_enabled": "${var.dd_enabled}", "external_secrets_operator_iam_role":
    "${aws_iam_role.external-secrets-role[0].arn}", "deploy_grafana": "${var.deploy_grafana}",
    "deploy_s3_mountpoint": "${var.deploy_s3_mountpoint}", "dicom-server_enabled":
    "${var.dicom-server_enabled}", "dicom-viewer_enabled": "${var.dicom-viewer_enabled}",
    "dictionary_url": "${var.dictionary_url}", "dispatcher_job_number": "${var.dispatcher_job_number}",
    "es_endpoint": "${var.es_endpoint}", "es_secret_name": "${aws_secretsmanager_secret.es_user_creds.name}",
    "fence_config_secret_name": "${aws_secretsmanager_secret.fence_config.name}",
    "fence_enabled": "${var.fence_enabled}", "fence_service_account": "${aws_iam_role.fence-role[0].arn}",
    "frontend_root": "${var.gen3ff_enabled ? "gen3ff" : "portal"}", "gitops_file":
    "${var.gitops_path != "" ? indent(4, file(var.gitops_path)) : "{}"}", "gen3ff_enabled":
    "${var.gen3ff_enabled}", "gen3ff_repo": "${var.gen3ff_repo}", "gen3ff_tag": "${var.gen3ff_tag}",
    "guppy_enabled": "${var.guppy_enabled}", "hatchery_enabled": "${var.hatchery_enabled}",
    "hatchery_service_account": "${aws_iam_role.hatchery-role[0].arn}", "hostname":
    "${var.hostname}", "indexd_enabled": "${var.indexd_enabled}", "indexd_prefix":
    "${var.indexd_prefix}", "ingress_enabled": "${var.ingress_enabled}", "manifestservice_enabled":
    "${var.manifestservice_enabled}", "metadata_enabled": "${var.metadata_enabled}",
    "netpolicy_enabled": "${var.netpolicy_enabled}", "peregrine_enabled": "${var.peregrine_enabled}",
    "pidgin_enabled": "${var.pidgin_enabled}", "portal_enabled": "${var.portal_enabled}",
    "public_datasets": "${var.public_datasets}", "requestor_enabled": "${var.requestor_enabled}",
    "revproxy_arn": "${var.revproxy_arn}", "revproxy_enabled": "${var.revproxy_enabled}",
    "sheepdog_enabled": "${var.sheepdog_enabled}", "slack_send_dbgap": "${var.slack_send_dbgap}",
    "slack_webhook": "${var.slack_webhook}", "ssjdispatcher_enabled": "${var.ssjdispatcher_enabled}",
    "sower_enabled": "${var.sower_enabled}", "tier_access_level": "${var.tier_access_level}",
    "tier_access_limit": "${var.tier_access_limit}", "usersync_enabled": "${var.usersync_enabled}",
    "usersync_schedule": "${var.usersync_schedule}", "user_yaml": "${var.useryaml_path
    != "" ? indent(4, file(var.useryaml_path)) : "{}"}", "useryaml_s3_path": "${var.useryaml_s3_path}",
    "vpc_name": "${var.vpc_name}", "waf_arn": "${var.waf_arn}", "wts_enabled": "${var.wts_enabled}"})}'
  sa_name: ${var.service}-sa
  sa_namespace: ${var.namespace}
  eks_oidc_issuer: ${trimprefix(data.aws_eks_cluster.eks.identity[0].oidc[0].issuer,
    "https://")}
  database_name: '${var.database_name != "" ? var.database_name : "${var.service}_${var.namespace}"}'
  database_username: '${var.username != "" ? var.username : "${var.service}_${var.namespace}"}'
  database_password: '${var.password != "" ? var.password : random_password.db_password[0].result}'
output:
  aws_region:
    value: ${var.aws_region}
  vpc_name:
    value: ${var.vpc_name}
  vpc_cidr_block:
    value: ${aws_vpc.main.cidr_block}
  indexd_rds_id:
    value: ${aws_db_instance.db_indexd.*.identifier}
  fence_rds_id:
    value: ${aws_db_instance.db_fence.*.identifier}
  sheepdog_rds_id:
    value: ${aws_db_instance.db_sheepdog.*.identifier}
  fence-bot_user_secret:
    value: ${module.cdis_vpc.fence-bot_secret}
    sensitive: true
  fence-bot_user_id:
    value: ${module.cdis_vpc.fence-bot_id}
  data-bucket_name:
    value: ${aws_sns_topic.user_updates.arn}
  kubeconfig:
    value: ${module.eks[0].kubeconfig}
    sensitive: true
  config_map_aws_auth:
    value: ${module.eks[0].config_map_aws_auth}
    sensitive: true
  eks_cluster_name:
    value: ${module.eks[0].cluster_name}
  eks_cluster_endpoint:
    value: ${module.eks[0].cluster_endpoint}
    sensitive: true
  eks_cluster_ca_cert:
    value: ${module.eks[0].cluster_certificate_authority_data}
    sensitive: true
  eks_oidc_arn:
    value: ${module.eks[0].oidc_provider_arn}
  cluster_oidc_provider_url:
    value: ${module.eks[0].cluster_oidc_provider_url}
  cluster_oidc_provider_arn:
    value: ${module.eks[0].cluster_oidc_provider_arn}
  opensearch_cluster_arn:
    value: '${var.deploy_es ? module.commons_vpc_es[0].es_arn : null}'
  aurora_cluster_writer_endpoint:
    description: Aurora cluster writer instance endpoint
    value: ${one(module.aurora[*].aurora_cluster_writer_endpoint)}
  aurora_cluster_reader_endpoint:
    description: Aurora cluster reader endpoint
    value: ${one(module.aurora[*].aurora_cluster_reader_endpoint)}
  aurora_cluster_master_username:
    description: Aurora cluster master username
    value: ${one(module.aurora[*].aurora_cluster_master_username)}
  aurora_cluster_master_password:
    description: Aurora cluster master user's password
    value: ${one(module.aurora[*].aurora_cluster_master_password)}
    sensitive: true
  es_endpoint:
    value: ${aws_elasticsearch_domain.gen3_metadata.endpoint}
  waf_arn:
    description: WAF arn - annotate the cluster ingress
    value: '${var.deploy_waf ? module.aws_waf[0].waf_arn : null}'
  zone_zid:
    value: ${aws_route53_zone.main.zone_id}
  zone_id:
    value: ${aws_route53_zone.main.id}
  zone_name:
    value: ${aws_route53_zone.main.name}
  vpc_id:
    value: ${aws_vpc.main.id}
  public_route_table_id:
    value: ${aws_route_table.public.id}
  gateway_id:
    value: ${aws_internet_gateway.gw.id}
  public_subnet_id:
    value: ${aws_subnet.public.id}
  security_group_local_id:
    value: ${aws_security_group.local.id}
  nat_gw_id:
    value: ${aws_nat_gateway.nat_gw.id}
  ssh_key_name:
    value: ${var.ssh_key_name}
  vpc_peering_id:
    value: ${aws_vpc_peering_connection.vpcpeering.id}
  es_user_key:
    value: ${aws_iam_access_key.es_user_key.secret}
  es_user_key_id:
    value: ${aws_iam_access_key.es_user_key.id}
  cwlogs:
    value: ${aws_cloudwatch_log_group.main_log_group.arn}
  fence-bot_id:
    value: ${module.fence-bot-user.fence-bot_id}
  fence-bot_secret:
    value: ${module.fence-bot-user.fence-bot_secret}
  squid_auto:
    value: ${module.squid-auto.squid_auto-name}
  squid_auto-name:
    value: ${aws_autoscaling_group.squid_auto.name}
  log_bucket_name:
    value: ${aws_s3_bucket.log_bucket.id}
  sns-topic-arn:
    value: ${aws_sns_topic.user_updates.arn}
  sqs-url:
    value: ${aws_sqs_queue.generic_queue.id}
  kibana_endpoint:
    value: ${aws_elasticsearch_domain.gen3_metadata.kibana_endpoint}
  es_arn:
    value: ${aws_elasticsearch_domain.gen3_metadata.arn}
  secret-arn:
    value: ${aws_secretsmanager_secret.secret.arn}
  sqs-arn:
    value: ${aws_sqs_queue.generic_queue.arn}
resource:
  aws_route_table:
    private_kube:
      vpc_id: ${module.cdis_vpc.vpc_id}
      tags:
        Name: private_kube
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
    public:
      vpc_id: ${aws_vpc.main.id}
      route:
        cidr_block: ${var.peering_cidr}
        gateway_id: ${aws_internet_gateway.gw.id}
        vpc_peering_connection_id: ${aws_vpc_peering_connection.vpcpeering.id}
      tags:
        Name: main
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${all}
  aws_route:
    for_peering:
      count: '${var.csoc_managed ? 1 : 0}'
      route_table_id: ${aws_route_table.private_kube.id}
      destination_cidr_block: ${var.peering_cidr}
      vpc_peering_connection_id: ${module.cdis_vpc.vpc_peering_id}
      depends_on: ${aws_route_table.private_kube}
    default_csoc:
      count: '${var.csoc_managed ? 0 : 1}'
      route_table_id: ${data.aws_route_tables.control_routing_table[count.index].id}
      destination_cidr_block: ${var.vpc_cidr_block}
      vpc_peering_connection_id: ${aws_vpc_peering_connection.vpcpeering.id}
    r:
      route_table_id: ${data.aws_route_table.selected.id}
      destination_cidr_block: ${var.vpc_cidr_block}
      vpc_peering_connection_id: ${aws_vpc_peering_connection_accepter.vpcpeering.id}
      depends_on: ${aws_vpc_peering_connection_accepter.vpcpeering}
  aws_route_table_association:
    private_kube:
      subnet_id: ${aws_subnet.private_kube.id}
      route_table_id: ${aws_route_table.private_kube.id}
    public:
      subnet_id: ${aws_subnet.public.id}
      route_table_id: ${aws_route_table.public.id}
    squid_auto0:
      count: ${length(var.squid_availability_zones)}
      subnet_id: ${aws_subnet.squid_pub0.*.id[count.index]}
      route_table_id: ${var.main_public_route}
  aws_subnet:
    private_db_alt:
      vpc_id: ${module.cdis_vpc.vpc_id}
      cidr_block: '${var.network_expansion ? cidrsubnet(var.vpc_cidr_block, 5, 1)
        : cidrsubnet(var.vpc_cidr_block, 4, 3)}'
      availability_zone: ${data.aws_availability_zones.available.names[1]}
      map_public_ip_on_launch: false
      tags:
        Name: private_db_alt
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${tags} ${availability_zone}
    public:
      vpc_id: ${aws_vpc.main.id}
      cidr_block: '${var.network_expansion ? cidrsubnet(var.vpc_cidr_block, 5, 2)
        : cidrsubnet(var.vpc_cidr_block, 4, 0)}'
      map_public_ip_on_launch: true
      availability_zone: ${data.aws_availability_zones.available.names[1]}
      tags: '${tomap({"Name": "public", "Organization": "${var.organization_name}",
        "Environment": "${var.vpc_name}"})}'
      lifecycle:
        ignore_changes: ${tags} ${availability_zone}
    squid_pub0:
      count: ${length(var.squid_availability_zones)}
      vpc_id: ${var.env_vpc_id}
      cidr_block: '${var.network_expansion ? cidrsubnet(var.squid_proxy_subnet, 2,
        count.index) : cidrsubnet(var.squid_proxy_subnet, 3, count.index)}'
      availability_zone: ${var.squid_availability_zones[count.index]}
      tags: '${tomap({"Name": "${var.env_squid_name}_pub${count.index}", "Organization":
        "${var.organization_name}", "Environment": "${var.env_squid_name}"})}'
  aws_db_subnet_group:
    private_group:
      name: ${var.vpc_name}_private_group
      subnet_ids: ${aws_subnet.private_kube.id} ${aws_subnet.private_db_alt.id}
      description: Private subnet group
      tags:
        Name: Private subnet group
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_iam_role:
    esproxy-role:
      count: '${var.deploy_es_role ? 1 : 0}'
      name: ${var.vpc_name}-esproxy-sa
      description: Role for ES proxy service account for ${var.vpc_name}
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\"\
        : {\n                \"Service\": \"ec2.amazonaws.com\"\n            },\n\
        \            \"Action\": \"sts:AssumeRole\"\n        },\n        {\n     \
        \       \"Sid\": \"\",\n            \"Effect\": \"Allow\",\n            \"\
        Principal\": {\n                \"Federated\": \"${module.eks[0].cluster_oidc_provider_arn}\"\
        \n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\"\
        ,\n            \"Condition\": {\n                \"ForAllValues:StringLike\"\
        : {\n                    \"${module.eks[0].oidc_provider_arn}:sub\": [\n \
        \                       \"system:serviceaccount:*:esproxy-sa\"\n         \
        \           ],\n                    \"${module.eks[0].oidc_provider_arn}:aud\"\
        : \"sts.amazonaws.com\"\n                }\n            }\n        }\n   \
        \ ]\n}"
      path: /gen3-service/
    flow_logs:
      count: '${var.vpc_flow_logs ? 1 : 0}'
      name: ${var.vpc_name}_flow_logs_role
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\
        \    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\"\
        : {\n        \"Service\": \"vpc-flow-logs.amazonaws.com\"\n      },\n    \
        \  \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}"
    squid-auto_role:
      name: ${var.env_squid_name}_role
      path: /
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"\
        Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n      \
        \      },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n\
        \        }\n    ]\n}"
    data_bucket:
      name: ${var.vpc_name}-data-bucket-access
      path: /
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"\
        Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n      \
        \      },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n\
        \        }\n    ]\n}"
    cloudtrail_to_cloudwatch_writer:
      name: ${var.vpc_name}_data-bucket_ct_to_cwl_writer
      path: /
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"\
        Principal\": {\n               \"Service\": \"cloudtrail.amazonaws.com\"\n\
        \            },\n            \"Effect\": \"Allow\",\n            \"Sid\":\
        \ \"\"\n        }\n    ]\n}"
    grafana-role:
      count: '${var.namespace == "default" && var.deploy_grafana ? 1 : 0}'
      name: ${var.vpc_name}-observability-role
      description: Role for grafana service account for ${var.vpc_name}
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:monitoring:observability"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      path: /gen3-service/
    role:
      count: '${var.secrets_manager_enabled ? var.role != "" ? 0 : 1 : 0}'
      name: ${var.vpc_name}-${var.service}-${var.namespace}-creds-access-role
      assume_role_policy: ${data.aws_iam_policy_document.sa_policy.json}
  helm_release:
    external-secrets:
      count: '${var.k8s_bootstrap_resources && var.deploy_external_secrets_operator
        ? 1 : 0}'
      name: external-secrets
      chart: external-secrets
      repository: https://charts.external-secrets.io
      version: ${var.external_secrets_operator_version}
      namespace: external-secrets
      create_namespace: true
      values: "serviceAccount:\n  create: true\n  name: external-secrets\nsyncPolicy:\n\
        \  automated:\n    prune: true\n    selfHeal: true"
    gen3:
      count: '${var.deploy_gen3 ? 1 : 0}'
      name: ${var.namespace}
      repository: http://helm.gen3.org
      chart: gen3
      namespace: ${var.namespace}
      create_namespace: true
      wait: false
      values: ${local.values}
  aws_db_instance:
    db_indexd:
      count: '${var.deploy_indexd_db && var.deploy_rds ? 1 : 0}'
      allocated_storage: ${var.indexd_db_size}
      identifier: ${var.vpc_name}-indexddb
      storage_type: gp2
      engine: postgres
      engine_version: ${var.engine_version}
      parameter_group_name: ${aws_db_parameter_group.rds-cdis-pg.name}
      instance_class: ${var.indexd_db_instance}
      db_name: ${var.indexd_database_name}
      username: ${var.indexd_db_username}
      password: '${var.db_password_indexd != "" ? var.db_password_indexd : random_password.indexd_password.result}'
      snapshot_identifier: ${var.indexd_snapshot}
      db_subnet_group_name: ${aws_db_subnet_group.private_group.id}
      vpc_security_group_ids: ${module.cdis_vpc.security_group_local_id}
      allow_major_version_upgrade: ${var.indexd_allow_major_version_upgrade}
      final_snapshot_identifier: ${replace(var.vpc_name, "_", "-")}-indexddb
      maintenance_window: ${var.indexd_maintenance_window}
      backup_retention_period: ${var.indexd_backup_retention_period}
      backup_window: ${var.indexd_backup_window}
      multi_az: ${var.indexd_ha}
      auto_minor_version_upgrade: ${var.indexd_auto_minor_version_upgrade}
      storage_encrypted: ${var.rds_instance_storage_encrypted}
      max_allocated_storage: ${var.indexd_max_allocated_storage}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        prevent_destroy: true
        ignore_changes: ${all}
  aws_db_parameter_group:
    rds-cdis-pg:
      name: ${var.vpc_name}-rds-cdis-pg
      family: postgres${local.pg_family_version}
      parameter:
        name: password_encryption
        value: scram-sha-256
      lifecycle:
        ignore_changes: ${all}
  aws_kms_key:
    kube_key:
      description: encryption/decryption key for kubernete
      enable_key_rotation: true
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_kms_alias:
    kube_key:
      name: alias/${var.vpc_name}-k8s
      target_key_id: ${aws_kms_key.kube_key.key_id}
  aws_key_pair:
    automation_dev:
      key_name: ${var.vpc_name}_automation_dev
      public_key: ${var.kube_ssh_key}
  aws_iam_policy:
    configbucket_reader:
      name: bucket_reader_cdis-gen3-users_${var.vpc_name}
      description: Read cdis-gen3-users/${var.config_folder}
      policy: ${data.aws_iam_policy_document.configbucket_reader.json}
      lifecycle:
        ignore_changes: ${policy}
    log_bucket_writer:
      name: bucket_writer_${aws_s3_bucket.log_bucket.id}
      description: Read or write ${aws_s3_bucket.log_bucket.id}
      policy: ${data.aws_iam_policy_document.log_bucket_writer.json}
    trail_writer:
      name: trail_write_to_cwl_${var.environment}
      description: Put logs in CWL ${var.environment}
      policy: ${data.aws_iam_policy_document.trail_policy.json}
    secrets_manager_policy:
      count: '${var.secrets_manager_enabled ? 1 : 0}'
      name: ${var.vpc_name}-${var.service}-${var.namespace}-creds-access-policy
      description: Policy for ${var.vpc_name}-${var.service} to access secrets manager
      policy: ${data.aws_iam_policy_document.policy.json}
  random_password:
    sheepdog_indexd_password:
      length: 32
      special: false
    db_password:
      count: '${var.password != "" ? 0 : 1}'
      length: 16
      special: false
  aws_wafv2_web_acl:
    waf:
      name: ${var.vpc_name}-waf
      description: WAF per environment for tailored security.
      scope: REGIONAL
      default_action:
        allow: {}
      dynamic:
        rule:
          for_each: ${concat(var.base_rules, var.additional_rules)}
          content:
            name: AWS-${rule.value.managed_rule_group_name}
            priority: ${rule.value.priority}
            override_action:
              none: {}
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: ${rule.value.managed_rule_group_name}
                dynamic:
                  rule_action_override:
                    for_each: '${length(rule.value.override_to_count) > 0 ? rule.value.override_to_count
                      : []}'
                    content:
                      action_to_use:
                        count: {}
                      name: ${rule_action_override.value}
            visibility_config:
              sampled_requests_enabled: true
              cloudwatch_metrics_enabled: true
              metric_name: AWS-${rule.value.managed_rule_group_name}
      tags:
        Environment: ${var.vpc_name}
      visibility_config:
        cloudwatch_metrics_enabled: false
        metric_name: WebAclMetrics
        sampled_requests_enabled: false
  aws_vpc:
    main:
      cidr_block: ${var.vpc_cidr_block}
      enable_dns_hostnames: true
      tags:
        Name: ${var.vpc_name}
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${tags}
  aws_flow_log:
    main:
      count: '${var.vpc_flow_logs ? 1 : 0}'
      iam_role_arn: ${aws_iam_role.flow_logs[count.index].arn}
      log_destination: ${aws_cloudwatch_log_group.main_log_group.arn}
      traffic_type: ${var.vpc_flow_traffic}
      vpc_id: ${aws_vpc.main.id}
  aws_iam_role_policy:
    example:
      count: '${var.vpc_flow_logs ? 1 : 0}'
      name: ${var.vpc_name}_flow_logs_policy
      role: ${aws_iam_role.flow_logs[count.index].id}
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n    \
        \  \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\"\
        ,\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogGroups\",\n \
        \       \"logs:DescribeLogStreams\"\n      ],\n      \"Effect\": \"Allow\"\
        ,\n      \"Resource\": \"*\"\n    }\n  ]\n}"
    squid_policy:
      name: ${var.env_squid_name}_policy
      policy: ${data.aws_iam_policy_document.squid_policy_document.json}
      role: ${aws_iam_role.squid-auto_role.id}
    grafana-role-policy:
      count: '${var.namespace == "default" && var.deploy_grafana ? 1 : 0}'
      name: grafana-role-policy
      role: ${aws_iam_role.grafana-role[0].id}
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["s3:AbortMultipartUpload",
        "s3:DeleteObject", "s3:GetObject", "s3:ListBucket", "s3:PutObject", "s3:DeleteObjectVersion",
        "s3:GetObjectVersion", "s3:PutObjectAcl", "s3:GetObjectAcl", "s3:ListBucketMultipartUploads",
        "s3:ListBucketVersions"], "Effect": "Allow", "Resource": ["arn:aws:s3:::${var.vpc_name}-observability-bucket",
        "arn:aws:s3:::${var.vpc_name}-observability-bucket/*"]}]})}'
  aws_vpc_ipv4_cidr_block_association:
    secondary_cidr:
      count: '${var.secondary_cidr_block != "" ? 1 : 0}'
      vpc_id: ${aws_vpc.main.id}
      cidr_block: ${var.secondary_cidr_block}
  aws_internet_gateway:
    gw:
      vpc_id: ${aws_vpc.main.id}
      tags:
        Name: ${var.vpc_name}-igw
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_nat_gateway:
    nat_gw:
      allocation_id: ${aws_eip.nat_gw.id}
      subnet_id: ${aws_subnet.public.id}
      tags:
        Name: ${var.vpc_name}-ngw
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_eip:
    nat_gw:
      vpc: true
      tags:
        Name: ${var.vpc_name}-ngw-eip
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_default_route_table:
    default:
      default_route_table_id: ${aws_vpc.main.default_route_table_id}
      route:
        cidr_block: ${var.peering_cidr}
        vpc_peering_connection_id: ${aws_vpc_peering_connection.vpcpeering.id}
      tags:
        Name: default table
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_main_route_table_association:
    default:
      vpc_id: ${aws_vpc.main.id}
      route_table_id: ${aws_default_route_table.default.id}
  aws_cloudwatch_log_group:
    main_log_group:
      name: ${var.vpc_name}
      retention_in_days: ${var.commons_log_retention}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_cloudwatch_log_subscription_filter:
    csoc_subscription:
      count: '${var.csoc_managed && var.send_logs_to_csoc ? 1 : 0}'
      name: ${var.vpc_name}_subscription
      destination_arn: 'arn:aws:logs:${data.aws_region.current.name}:${var.csoc_managed
        ? var.csoc_account_id : data.aws_caller_identity.current.account_id}:destination:${var.vpc_name}_logs_destination'
      log_group_name: ${var.vpc_name}
      filter_pattern: ''
      lifecycle:
        ignore_changes: ${distribution}
  aws_route53_zone:
    main:
      name: internal.io
      comment: internal dns server for ${var.vpc_name}
      vpc:
        vpc_id: ${aws_vpc.main.id}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_vpc_peering_connection:
    vpcpeering:
      peer_owner_id: '${var.csoc_managed ? var.csoc_account_id : data.aws_caller_identity.current.account_id}'
      peer_vpc_id: ${var.peering_vpc_id}
      vpc_id: ${aws_vpc.main.id}
      auto_accept: false
      tags:
        Name: VPC Peering between ${var.vpc_name} and adminVM vpc
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${all}
  aws_iam_user:
    es_user:
      name: ${var.vpc_name}_es_user
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
    fence-bot:
      name: ${var.vpc_name}_fence-bot
  aws_iam_access_key:
    es_user_key:
      user: ${aws_iam_user.es_user.name}
    fence-bot_user_key:
      user: ${aws_iam_user.fence-bot.name}
  aws_security_group:
    proxy:
      count: '${var.deploy_single_proxy ? 1 : 0 }'
      name: squid-proxy
      description: allow inbound tcp at 3128
      vpc_id: ${aws_vpc.main.id}
      ingress:
        from_port: 0
        to_port: 3128
        protocol: TCP
        cidr_blocks: ${local.cidrs}
      tags:
        Environment: ${var.vpc_name}
        Organization: Basic Service
    squidauto_out:
      name: ${var.env_squid_name}-squidauto_out
      description: security group that allow outbound traffics
      vpc_id: ${var.env_vpc_id}
      egress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks: 0.0.0.0/0
      tags:
        Environment: ${var.env_squid_name}
        Organization: ${var.organization_name}
    private_es:
      name: private_es
      description: security group that allow es port out
      vpc_id: ${local.vpc_id}
      ingress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks: ${local.all_cidr_blocks}
      egress:
        from_port: 0
        to_port: 0
        protocol: '-1'
        cidr_blocks: ${local.all_cidr_blocks}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
  aws_iam_user_policy:
    fence-bot_extra_policy:
      count: ${length(var.bucket_access_arns)}
      name: ${var.vpc_name}_fence-bot_policy_${count.index}
      user: ${aws_iam_user.fence-bot.name}
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n    \
        \  \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n \
        \       \"s3:DeleteObject\"\n      ],\n      \"Effect\": \"Allow\",\n    \
        \  \"Resource\": [\"${var.bucket_access_arns[count.index]}/*\"]\n    },\n\
        \    {\n       \"Action\": [\n         \"s3:List*\",\n         \"s3:Get*\"\
        \n       ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"${var.bucket_access_arns[count.index]}/*\"\
        , \"${var.bucket_access_arns[count.index]}\"]\n    }\n  ]\n}"
  aws_iam_role_policy_attachment:
    eks-policy-AmazonSSMManagedInstanceCore:
      policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      role: ${aws_iam_role.squid-auto_role.id}
    data_bucket_writer:
      role: ${aws_iam_role.data_bucket.name}
      policy_arn: ${aws_iam_policy.data_bucket_writer.arn}
    trail_writer_role:
      role: ${aws_iam_role.cloudtrail_to_cloudwatch_writer.name}
      policy_arn: ${aws_iam_policy.trail_writer.arn}
    hatchery-role-policy-attachment:
      count: '${var.hatchery_enabled ? 1 : 0}'
      role: ${aws_iam_role.hatchery-role[0].name}
      policy_arn: arn:aws:iam::aws:policy/AWSResourceAccessManagerFullAccess
    new_attach:
      count: '${var.secrets_manager_enabled ? 1 : 0}'
      role: '${var.role != "" ? var.role : aws_iam_role.role[0].name}'
      policy_arn: ${aws_iam_policy.secrets_manager_policy[0].arn}
  aws_iam_instance_profile:
    squid-auto_role_profile:
      name: ${var.env_vpc_name}_squid-auto_role_profile
      role: ${aws_iam_role.squid-auto_role.id}
  aws_launch_template:
    squid_auto:
      name_prefix: ${var.env_squid_name}-lt
      instance_type: ${var.squid_instance_type}
      image_id: ${data.aws_ami.public_squid_ami.id}
      key_name: ${var.ssh_key_name}
      iam_instance_profile:
        name: ${aws_iam_instance_profile.squid-auto_role_profile.name}
      network_interfaces:
        associate_public_ip_address: true
        security_groups: ${aws_security_group.squidauto_in.id} ${aws_security_group.squidauto_out.id}
      user_data: "${sensitive(base64encode(\"MIME-Version: 1.0\nContent-Type: multipart/mixed;\
        \ boundary=\"BOUNDARY\"\n\n--BOUNDARY\nContent-Type: text/x-shellscript; charset=\"\
        us-ascii\"\n\n#!/bin/bash\nDISTRO=$(awk -F '[=\"]*' '/^NAME/ { print $2 }'\
        \ < /etc/os-release)\nUSER=\"ubuntu\"\nif [[ $DISTRO == \"Amazon Linux\" ]];\
        \ then\n  USER=\"ec2-user\"\n  if [[ $(awk -F '[=\"]*' '/^VERSION_ID/ { print\
        \ $2 }' < /etc/os-release) == \"2023\" ]]; then\n    DISTRO=\"al2023\"\n \
        \ fi\nfi\n(\n  if [[ $DISTRO == \"Amazon Linux\" ]]; then\n    sudo yum update\
        \ -y\n    sudo yum install git lsof dracut-fips openssl rsync -y\n    sudo\
        \ /sbin/grubby --update-kernel=ALL --args=\"fips=1\"\n    echo \"0 3 * * *\
        \ root yum update --security -y\" | sudo tee /etc/cron.d/security-updates\n\
        \  elif [[ $DISTRO == \"al2023\" ]]; then\n    sudo dnf update -y\n    sudo\
        \ dnf install git rsync lsof docker crypto-policies crypto-policies-scripts\
        \ -y\n    sudo fips-mode-setup --enable\n  fi\n) > /var/log/bootstrapping_script.log\n\
        --BOUNDARY\nContent-Type: text/cloud-config; charset=\"us-ascii\"\n\npower_state:\n\
        \    delay: now\n    mode: reboot\n    message: Powering off\n    timeout:\
        \ 2\n    condition: true\n\n--BOUNDARY\nContent-Type: text/x-shellscript;\
        \ charset=\"us-ascii\"\n\n#!/bin/bash\nDISTRO=$(awk -F '[=\"]*' '/^NAME/ {\
        \ print $2 }' < /etc/os-release)\nUSER=\"ubuntu\"\nif [[ $DISTRO == \"Amazon\
        \ Linux\" ]]; then\n  USER=\"ec2-user\"\n  if [[ $(awk -F '[=\"]*' '/^VERSION_ID/\
        \ { print $2 }' < /etc/os-release) == \"2023\" ]]; then\n    DISTRO=\"al2023\"\
        \n  fi\nfi\nUSER_HOME=\"/home/$USER\"\nCLOUD_AUTOMATION=\"$USER_HOME/cloud-automation\"\
        \n(\n  cd $USER_HOME\n  if [[ ! -z \"${var.slack_webhook}\" ]]; then\n   \
        \ echo \"${var.slack_webhook}\" > /slackWebhook\n  fi\n  git clone https://github.com/uc-cdis/cloud-automation.git\n\
        \  cd $CLOUD_AUTOMATION\n  git pull\n\n  # This is needed temporarily for\
        \ testing purposes ; before merging the code to master\n  if [ \"${var.branch}\"\
        \ != \"master\" ];\n  then\n    git checkout \"${var.branch}\"\n    git pull\n\
        \  fi\n  chown -R $USER. $CLOUD_AUTOMATION\n\n  echo \"127.0.1.1 ${var.env_squid_name}\"\
        \ | tee --append /etc/hosts\n  hostnamectl set-hostname ${var.env_squid_name}\n\
        \  if [[ $DISTRO == \"Ubuntu\" ]]; then\n    apt -y update\n    DEBIAN_FRONTEND='noninteractive'\
        \ apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold'\
        \ upgrade\n\n    apt autoremove -y\n    apt clean\n    apt autoclean\n  fi\n\
        \  cd $USER_HOME\n\n  bash \"${var.bootstrap_path}${var.bootstrap_script}\"\
        \ \"cwl_group=${var.env_log_group};${join(\";\",var.extra_vars)}\" 2>&1\n\
        \  cd $CLOUD_AUTOMATION\n  git checkout master\n  # Install qualys agent if\
        \ the activtion and customer id provided\n  # Amazon Linux does not support\
        \ qualys agent (?)\n  # https://success.qualys.com/discussions/s/question/0D52L00004TnwvgSAB/installing-qualys-cloud-agent-on-amazon-linux-2-instances\n\
        \  if [[ $DISTRO == \"Ubuntu\" ]]; then\n    if [[ ! -z \"${var.activation_id}\"\
        \ ]] || [[ ! -z \"${var.customer_id}\" ]]; then\n      apt install awscli\
        \ jq -y\n      aws s3 cp s3://qualys-agentpackage/QualysCloudAgent.deb ./qualys-cloud-agent.x86_64.deb\n\
        \      dpkg -i ./qualys-cloud-agent.x86_64.deb\n      # Clean up deb package\
        \ after install\n      rm qualys-cloud-agent.x86_64.deb\n      sudo /usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh\
        \ ActivationId=${var.activation_id} CustomerId=${var.customer_id}\n    fi\n\
        \  fi\n) > /var/log/bootstrapping_script_part2.log\n--BOUNDARY--\"))}"
      block_device_mappings:
        device_name: /dev/xvda
        ebs:
          volume_size: ${var.squid_instance_drive_size}
      tag_specifications:
        resource_type: instance
        tags:
          Name: ${var.env_squid_name}
      lifecycle:
        create_before_destroy: true
  null_resource:
    service_depends_on:
      triggers:
        deps: ${jsonencode(var.squid_depends_on)}
    config_setup:
      provisioner:
        local-exec:
          command: echo "${templatefile("${path.module}/00configmap.yaml", {vpc_name
            = var.vpc_name, hostname = var.hostname, revproxy_arn = var.ssl_certificate_id,
            gitops_path = var.gitops_path})}" > ${var.vpc_name}_output/00configmap.yaml
    db_dump:
      count: '${var.db_dump && var.dump_file_storage_location != "" ? 1 : 0}'
      provisioner:
        local-exec:
          interpreter: /bin/bash -c
          command: "# If we have a role to assume, then assume it and set the credentials\n\
            if [[ ${var.db_job_role_arn} != \"\" ]]; then\n  CREDENTIALS=(`aws sts\
            \ assume-role --role-arn ${var.db_job_role_arn} --role-session-name \"\
            db-migration-cli\" --query \"[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]\"\
            \ --output text`)\n  unset AWS_PROFILE\n  export AWS_DEFAULT_REGION=us-east-1\n\
            \  export AWS_ACCESS_KEY_ID=\"$${CREDENTIALS[0]}\"\n  export AWS_SECRET_ACCESS_KEY=\"\
            $${CREDENTIALS[1]}\"\n  export AWS_SESSION_TOKEN=\"$${CREDENTIALS[2]}\"\
            \nfi\n    \npg_dump --username=\"${local.database_username}\" --dbname=\"\
            ${local.database_name}\" --host=\"${data.aws_db_instance.database.address}\"\
            \ --no-password --no-owner --no-privileges >> ./dump.sql && aws s3 cp\
            \ ./dump.sql ${var.dump_file_storage_location} && rm ./dump.sql\necho\
            \ \"Done restoring database\""
          environment:
            PGPASSWORD: ${local.database_password}
      triggers:
        username: ${local.database_username}
        database: ${local.database_name}
        password: ${local.database_password}
      depends_on: ${null_resource.user_setup}
  aws_iam_service_linked_role:
    squidautoscaling:
      aws_service_name: autoscaling.amazonaws.com
      custom_suffix: ${var.env_vpc_name}_squid
      lifecycle:
        ignore_changes: ${custom_suffix}
    es:
      count: '${var.es_linked_role ? 1 : 0}'
      aws_service_name: es.amazonaws.com
  aws_kms_grant:
    kms:
      count: '${var.fips ? 1 : 0}'
      name: kms-cmk-eks
      key_id: ${var.fips_ami_kms}
      grantee_principal: ${aws_iam_service_linked_role.squidautoscaling.arn}
      operations: Encrypt Decrypt ReEncryptFrom ReEncryptTo GenerateDataKey GenerateDataKeyWithoutPlaintext
        DescribeKey CreateGrant
  aws_autoscaling_group:
    squid_auto:
      name: ${var.env_squid_name}
      service_linked_role_arn: ${aws_iam_service_linked_role.squidautoscaling.arn}
      desired_capacity: ${var.cluster_desired_capasity}
      max_size: ${var.cluster_max_size}
      min_size: ${var.cluster_min_size}
      vpc_zone_identifier: ${aws_subnet.squid_pub0.*.id}
      depends_on: ${null_resource.service_depends_on} ${aws_route_table_association.squid_auto0}
      launch_template:
        id: ${aws_launch_template.squid_auto.id}
        version: $Latest
      tag:
        key: Environment
        value: ${var.organization_name}
        propagate_at_launch: true
  aws_s3_bucket:
    log_bucket:
      bucket: ${var.vpc_name}-data-bucket-logs
      tags:
        Name: ${var.vpc_name}
        Environment: ${var.environment}
        Purpose: logs bucket
    mybucket:
      bucket: ${var.bucket_name}
      lifecycle:
        ignore_changes: tags tags_all
  aws_s3_bucket_server_side_encryption_configuration:
    log_bucket:
      bucket: ${aws_s3_bucket.log_bucket.bucket}
      rule:
        apply_server_side_encryption_by_default:
          sse_algorithm: aws:kms
    aes_encryption:
      count: '${var.aes_encryption ? 1 : 0}'
      bucket: ${aws_s3_bucket.mybucket.id}
      rule:
        apply_server_side_encryption_by_default:
          sse_algorithm: AES256
  aws_s3_bucket_logging:
    data_bucket:
      bucket: ${aws_s3_bucket.data_bucket.id}
      target_bucket: ${aws_s3_bucket.log_bucket.id}
      target_prefix: log/${var.vpc_name}-data-bucket/
    mybucket:
      count: '${var.logging_bucket_name != "" ? 1 : 0}'
      bucket: ${aws_s3_bucket.mybucket.id}
      target_bucket: ${var.logging_bucket_name}
      target_prefix: log/${var.bucket_name}/
      lifecycle:
        ignore_changes: ${all}
  aws_s3_bucket_public_access_block:
    data_bucket_logs_privacy:
      bucket: ${aws_s3_bucket.log_bucket.id}
      block_public_acls: true
      block_public_policy: true
      ignore_public_acls: true
      restrict_public_buckets: true
    mybucket:
      count: '${var.public_access_block ? 1 : 0}'
      bucket: ${aws_s3_bucket.mybucket.id}
      block_public_acls: ${var.block_public_acls}
      block_public_policy: ${var.block_public_policy}
      ignore_public_acls: ${var.ignore_public_acls}
      restrict_public_buckets: ${var.restrict_public_buckets}
  aws_s3_bucket_notification:
    bucket_notification:
      bucket: ${var.bucket_name}
      topic:
        topic_arn: ${aws_sns_topic.user_updates.arn}
        events: s3:ObjectCreated:Put s3:ObjectCreated:Post s3:ObjectCreated:Copy s3:ObjectCreated:CompleteMultipartUpload
      count: '${var.configure_bucket_notifications ? 1 : 0}'
      lifecycle:
        ignore_changes: ${topic}
  aws_s3_bucket_lifecycle_configuration:
    log_bucket:
      bucket: ${aws_s3_bucket.log_bucket.bucket}
      rule:
        status: Enabled
        id: log
        filter:
          and:
            prefix: /
            tags:
              rule: log
              autoclean: 'true'
        expiration:
          days: 120
    mybucket:
      count: '${var.bucket_lifecycle_configuration != "" ? 1 : 0}'
      bucket: ${aws_s3_bucket.mybucket.id}
      rule:
        status: Enabled
        id: mybucket
        abort_incomplete_multipart_upload:
          days_after_initiation: 7
  aws_s3_bucket_policy:
    log_bucket_writer_by_ct:
      bucket: ${aws_s3_bucket.log_bucket.id}
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n    \
        \  \"Sid\": \"AWSCloudTrailAclCheck20150319\",\n      \"Effect\": \"Allow\"\
        ,\n      \"Principal\": {\n         \"Service\": \"cloudtrail.amazonaws.com\"\
        \n      },\n      \"Action\": \"s3:GetBucketAcl\",\n      \"Resource\": \"\
        ${aws_s3_bucket.log_bucket.arn}\"\n    },\n\n    {\n      \"Sid\": \"AWSCloudTrailWrite20150319\"\
        ,\n     \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\"\
        : \"cloudtrail.amazonaws.com\"\n      },\n      \"Action\": \"s3:PutObject\"\
        ,\n      \"Resource\": \"${aws_s3_bucket.log_bucket.arn}/*\",\n      \"Condition\"\
        : {\n         \"StringEquals\": {\n         \"s3:x-amz-acl\": \"bucket-owner-full-control\"\
        \n         }\n      }\n    }\n  ]\n}"
    mybucket:
      count: '${var.policy_role_arn != "" ? 1 : 0}'
      bucket: ${aws_s3_bucket.mybucket.id}
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect": "Allow",
        "Principal": {"AWS": "${var.policy_role_arn}"}, "Action": "${var.policy_actions}",
        "Resource": ["${aws_s3_bucket.mybucket.arn}", "${aws_s3_bucket.mybucket.arn}/*"]}]})}'
  aws_cloudtrail:
    logger_trail:
      name: ${var.vpc_name}-data-bucket-trail
      s3_bucket_name: ${var.bucket_id}
      s3_key_prefix: trail-logs
      include_global_service_events: false
      cloud_watch_logs_role_arn: ${aws_iam_role.cloudtrail_to_cloudwatch_writer.arn}
      cloud_watch_logs_group_arn: ${var.cloudwatchlogs_group}:*
      event_selector:
        read_write_type: All
        include_management_events: false
        data_resource:
          type: AWS::S3::Object
          values: ${var.bucket_arn}/
      lifecycle:
        ignore_changes: ${all}
      tags:
        Name: ${var.vpc_name}_data-bucket
        Environment: ${var.environment}
        Purpose: trail_for_${var.vpc_name}_data_bucket
  aws_sns_topic:
    user_updates:
      name: ${var.bucket_name}_sns_topic
  aws_sqs_queue:
    user_updates_queue:
      name: ${var.bucket_name}_data_upload
      visibility_timeout_seconds: 300
    generic_queue:
      name: ${var.sqs_name}
      visibility_timeout_seconds: 300
      message_retention_seconds: 1209600
      tags:
        Organization: gen3
        description: Created by SQS module
  aws_sns_topic_subscription:
    user_updates_sqs_target:
      topic_arn: ${aws_sns_topic.user_updates.arn}
      protocol: sqs
      endpoint: ${aws_sqs_queue.user_updates_queue.arn}
  aws_sqs_queue_policy:
    subscribe_sns:
      queue_url: ${aws_sqs_queue.user_updates_queue.id}
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"sqspolicy\",\n  \"Statement\"\
        : [\n    {\n      \"Sid\": \"100\",\n      \"Effect\": \"Allow\",\n      \"\
        Principal\": \"*\",\n      \"Action\": \"sqs:SendMessage\",\n      \"Resource\"\
        : \"${aws_sqs_queue.user_updates_queue.arn}\",\n      \"Condition\": {\n \
        \       \"ArnEquals\": {\n          \"aws:SourceArn\": \"${aws_sns_topic.user_updates.arn}\"\
        \n        }\n      }\n    }\n  ]\n}"
  aws_sns_topic_policy:
    default:
      arn: ${aws_sns_topic.user_updates.arn}
      policy: ${data.aws_iam_policy_document.sns-topic-policy.json}
  aws_cloudwatch_log_resource_policy:
    es_logs:
      policy_name: es_logs_for_${var.vpc_name}
      policy_document: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n  \
        \  {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\"\
        : \"es.amazonaws.com\"\n      },\n      \"Action\": [\n        \"logs:PutLogEvents\"\
        ,\n        \"logs:PutLogEventsBatch\",\n        \"logs:CreateLogStream\"\n\
        \      ],\n      \"Resource\": \"${data.aws_cloudwatch_log_group.logs_group.arn}:*\"\
        \n    }\n  ]\n}"
  aws_elasticsearch_domain:
    gen3_metadata:
      domain_name: '${var.es_name != "" ? var.es_name : "${var.vpc_name}-gen3-metadata"}'
      elasticsearch_version: ${var.es_version}
      access_policies: ${local.es_policy}
      encrypt_at_rest:
        enabled: ${var.encryption}
      node_to_node_encryption:
        enabled: ${var.encryption}
      vpc_options:
        security_group_ids: ${aws_security_group.private_es.id}
        subnet_ids: ${data.aws_subnets.private.ids}
      cluster_config:
        instance_type: ${var.instance_type}
        instance_count: ${var.instance_count}
      ebs_options:
        ebs_enabled: 'true'
        volume_size: ${var.ebs_volume_size_gb}
      log_publishing_options:
        log_type: ES_APPLICATION_LOGS
        cloudwatch_log_group_arn: ${data.aws_cloudwatch_log_group.logs_group.arn}:*
        enabled: 'true'
      advanced_options:
        rest.action.multi.allow_explicit_index: 'true'
      snapshot_options:
        automated_snapshot_start_hour: 23
      lifecycle:
        ignore_changes: ${elasticsearch_version}
      tags:
        Name: gen3_metadata
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      depends_on: ${aws_cloudwatch_log_resource_policy.es_logs} ${aws_iam_service_linked_role.es}
  aws_vpc_peering_connection_accepter:
    vpcpeering:
      vpc_peering_connection_id: ${var.pcx_id}
      auto_accept: true
      tags:
        Name: VPC Peering between ${var.vpc_name} and adminVM vpc
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
        ignore_changes: ${all}
  local_file:
    values:
      count: '${var.deploy_gen3 ? 1 : 0}'
      filename: values.yaml
      content: ${local.values}
  aws_secretsmanager_secret:
    es_user_creds:
      name: ${var.vpc_name}_${var.namespace}-aws-es-proxy-creds
    secret:
      name: ${var.vpc_name}_${var.secret_name}
  aws_secretsmanager_secret_version:
    es_user_creds:
      secret_id: ${aws_secretsmanager_secret.es_user_creds.id}
      secret_string: '${templatefile("${path.module}/aws-user-creds.tftpl", {"access_key":
        "${var.es_user_key}", "access_secret": "${var.es_user_secret}"})}'
    secret:
      secret_id: ${aws_secretsmanager_secret.secret.id}
      secret_string: ${var.secret}
  aws_s3_bucket_ownership_controls:
    mybucket:
      bucket: ${aws_s3_bucket.mybucket.id}
      rule:
        object_ownership: ${var.bucket_ownership}
  aws_s3_bucket_versioning:
    name:
      count: '${var.versioning ? 1 : 0}'
      bucket: ${aws_s3_bucket.mybucket.id}
      versioning_configuration:
        status: Enabled
terraform: []
variable:
  vpc_name:
    default: ''
    description: Name of the VPC
    type: string
  iam_role_name:
    default: csoc_adminvm
  vpc_cidr_block:
    default: ''
    description: CIDR block of the VPC
    type: string
  vpc_flow_logs:
    default: false
  vpc_flow_traffic:
    default: ALL
  aws_region:
    default: us-east-1
  aws_cert_name:
    default: AWS-CERTIFICATE-NAME
  csoc_account_id:
    default: '433568766270'
  peering_cidr:
    default: 10.128.0.0/20
  fence_db_size:
    default: 10
  sheepdog_db_size:
    default: 10
  indexd_db_size:
    default: 10
  db_password_fence:
    default: ''
    sensitive: true
  db_password_peregrine:
    default: ''
    sensitive: true
  db_password_sheepdog:
    default: ''
    sensitive: true
  db_password_indexd:
    default: ''
    sensitive: true
  portal_app:
    default: dev
  fence_snapshot:
    default: ''
  peregrine_snapshot:
    default: ''
  sheepdog_snapshot:
    default: ''
  indexd_snapshot:
    default: ''
  fence_db_instance:
    default: db.t3.small
  sheepdog_db_instance:
    default: db.t3.small
  indexd_db_instance:
    default: db.t3.small
  hostname:
    default: ''
    description: hostname of the commons
  kube_ssh_key:
    default: ''
  kube_additional_keys:
    default: ''
  hmac_encryption_key:
    default: deprecated
    sensitive: true
  sheepdog_secret_key:
    default: ''
    sensitive: true
  sheepdog_indexd_password:
    default: ''
    sensitive: true
  sheepdog_oauth2_client_id:
    default: deprecated
    sensitive: true
  config_folder:
    default: dev
  sheepdog_oauth2_client_secret:
    default: deprecated
    sensitive: true
  ami_account_id:
    default: '137112412989'
  squid_image_search_criteria:
    description: Search criteria for squid AMI look up
    default: ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*
  peering_vpc_id:
    default: vpc-e2b51d99
  squid-nlb-endpointservice-name:
    default: com.amazonaws.vpce.us-east-1.vpce-svc-0ce2261f708539011
  slack_webhook:
    default: ''
    sensitive: true
    description: Slack webhook
  secondary_slack_webhook:
    default: ''
    sensitive: true
  alarm_threshold:
    default: '85'
  csoc_managed:
    default: true
  csoc_peering:
    default: false
  mailgun_api_key:
    default: ''
  mailgun_smtp_host:
    default: smtp.mailgun.org
  mailgun_api_url:
    default: https://api.mailgun.net/v3/
  fence_ha:
    default: false
  sheepdog_ha:
    default: false
  indexd_ha:
    default: false
  fence_maintenance_window:
    default: SAT:09:00-SAT:09:59
  sheepdog_maintenance_window:
    default: SAT:10:00-SAT:10:59
  indexd_maintenance_window:
    default: SAT:11:00-SAT:11:59
  fence_backup_retention_period:
    default: '4'
  sheepdog_backup_retention_period:
    default: '4'
  indexd_backup_retention_period:
    default: '4'
  fence_backup_window:
    default: 06:00-06:59
  sheepdog_backup_window:
    default: 07:00-07:59
  indexd_backup_window:
    default: 08:00-08:59
  engine_version:
    default: '13'
  fence_auto_minor_version_upgrade:
    default: 'true'
  indexd_auto_minor_version_upgrade:
    default: 'true'
  sheepdog_auto_minor_version_upgrade:
    default: 'true'
  users_bucket_name:
    default: cdis-gen3-users
  fence_database_name:
    default: fence
  sheepdog_database_name:
    default: gdcapi
  indexd_database_name:
    default: indexd
  fence_db_username:
    default: fence_user
  sheepdog_db_username:
    default: sheepdog
  indexd_db_username:
    default: indexd_user
  fence_allow_major_version_upgrade:
    default: 'true'
  sheepdog_allow_major_version_upgrade:
    default: 'true'
  indexd_allow_major_version_upgrade:
    default: 'true'
  ha-squid_instance_type:
    description: Instance type for HA squid
    default: t3.medium
  ha-squid_instance_drive_size:
    description: Volume size for HA squid instances
    default: 25
  deploy_single_proxy:
    description: Single instance plus HA
    default: false
  ha-squid_bootstrap_script:
    description: Bootstrapt script for ha-squid instances
    default: squid_running_on_docker.sh
  ha-squid_extra_vars:
    type: ${list(string)}
    description: additional variables to pass along with the bootstrapscript
    default: squid_image=master
  branch:
    description: branch to use in bootstrap script
    default: master
  fence-bot_bucket_access_arns:
    description: When fence bot has to access another bucket that wasn't created by
      the VPC module
    default: []
  deploy_ha_squid:
    description: Should this module be deployed
    default: true
  ha-squid_cluster_desired_capasity:
    description: If ha squid is enabled and you want to set your own capasity
    default: 2
  ha-squid_cluster_min_size:
    description: If ha squid is enabled and you want to set your own min size
    default: 1
  ha-squid_cluster_max_size:
    description: If ha squid is enabled and you want to set your own max size
    default: 3
  deploy_sheepdog_db:
    description: Whether or not to deploy the database instance
    default: true
  deploy_fence_db:
    description: Whether or not to deploy the database instance
    default: true
  deploy_indexd_db:
    description: Whether or not to deploy the database instance
    default: true
  single_squid_instance_type:
    description: Single squid instance type
    default: t2.micro
  network_expansion:
    description: let k8s workers run on a /22 subnet
    default: false
  rds_instance_storage_encrypted:
    default: true
  fence_max_allocated_storage:
    description: Maximum allocated storage for autosacaling
    default: 0
  sheepdog_max_allocated_storage:
    description: Maximum allocated storage for autosacaling
    default: 0
  indexd_max_allocated_storage:
    description: Maximum allocated storage for autosacaling
    default: 0
  activation_id:
    default: ''
    sensitive: true
  customer_id:
    default: ''
    sensitive: true
  fips:
    default: false
  ignore_fence_changes:
    default: engine_version storage_encrypted identifier
  ignore_sheepdog_changes:
    default: engine_version storage_encrypted identifier
  ignore_indexd_changes:
    default: engine_version storage_encrypted identifier
  prevent_fence_destroy:
    default: true
  prevent_sheepdog_destroy:
    default: true
  prevent_indexd_destroy:
    default: true
  deploy_alarms:
    default: true
  deploy_argocd:
    default: true
  argocd_version:
    default: 7.8.2
  deploy_external_secrets_operator:
    default: true
  external_secrets_operator_version:
    default: 0.14.0
  ec2_keyname:
    default: someone@uchicago.edu
  instance_type:
    default: m4.large.elasticsearch
  jupyter_instance_type:
    default: t3.large
  workflow_instance_type:
    default: t3.2xlarge
  secondary_cidr_block:
    default: ''
  users_policy: {}
  worker_drive_size:
    default: 30
  eks_version:
    default: '1.31'
  workers_subnet_size:
    default: 24
  bootstrap_script:
    default: squid_running_on_docker.sh
  jupyter_bootstrap_script:
    default: bootstrap-with-security-updates.sh
  kernel:
    default: N/A
  jupyter_worker_drive_size:
    default: 30
  workflow_bootstrap_script:
    default: bootstrap.sh
  workflow_worker_drive_size:
    default: 30
  cidrs_to_route_to_gw:
    default: []
  organization_name:
    default: cdis
    description: Name of the organization
    type: string
  jupyter_asg_desired_capacity:
    default: 0
  jupyter_asg_max_size:
    default: 10
  jupyter_asg_min_size:
    default: 0
  workflow_asg_desired_capacity:
    default: 0
  workflow_asg_max_size:
    default: 50
  workflow_asg_min_size:
    default: 0
  iam-serviceaccount:
    default: true
  domain_test:
    description: url for the lambda function to check for the proxy
    default: www.google.com
  deploy_workflow:
    description: Deploy workflow nodepool?
    default: false
  secondary_availability_zones:
    description: AZ to be used by EKS nodes in the secondary subnet
    default: us-east-1a us-east-1b us-east-1c us-east-1d
  deploy_jupyter:
    description: Deploy workflow nodepool?
    default: true
  dual_proxy:
    description: Single instance and HA
    default: false
  single_az_for_jupyter:
    description: Jupyter notebooks on a single AZ
    default: false
  oidc_eks_thumbprint:
    description: Thumbprint for the AWS OIDC identity provider
    default: 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
  sns_topic_arn:
    description: SNS topic ARN for alerts
    default: arn:aws:sns:us-east-1:433568766270:planx-csoc-alerts-topic
  fips_ami_kms:
    default: arn:aws:kms:us-east-1:707767160287:key/mrk-697897f040ef45b0aa3cebf38a916f99
  fips_enabled_ami:
    default: ami-0de87e3680dcb13ec
  availability_zones:
    description: AZ to be used by EKS nodes
    default: us-east-1a us-east-1c us-east-1d
  deploy_eks:
    default: true
  deploy_es:
    default: true
  es_name:
    default: ''
  ebs_volume_size_gb:
    default: 20
  encryption:
    default: 'true'
  es_instance_type:
    default: m4.large.elasticsearch
  es_instance_count:
    default: 3
  es_version:
    description: What version to use when deploying ES
    default: '7.10'
  es_linked_role:
    description: Whether or no to deploy a linked roll for ES
    default: true
  spot_linked_role:
    default: false
  cluster_identifier:
    description: Cluster Identifier
    type: string
    default: aurora-cluster
  cluster_instance_identifier:
    description: Cluster Instance Identifier
    type: string
    default: aurora-cluster-instance
  cluster_instance_class:
    description: Cluster Instance Class
    type: string
    default: db.serverless
  cluster_engine:
    description: Aurora database engine type
    type: string
    default: aurora-postgresql
  cluster_engine_version:
    description: Aurora database engine version.
    type: string
    default: '13.7'
  master_username:
    description: Master DB username
    type: string
    default: postgres
  storage_encrypted:
    description: Specifies whether storage encryption is enabled
    type: bool
    default: true
  apply_immediate:
    description: Instruct the service to apply the change immediately. This can result
      in a brief downtime as the server reboots. See the AWS Docs on RDS Maintenance
      for more information
    type: bool
    default: true
  engine_mode:
    type: string
    description: use provisioned for Serverless v2 RDS cluster
    default: provisioned
  serverlessv2_scaling_min_capacity:
    type: string
    description: Serverless v2 RDS cluster minimum scaling capacity in ACUs
    default: '0.5'
  serverlessv2_scaling_max_capacity:
    type: string
    description: Serverless v2 RDS cluster maximum scaling capacity in ACUs
    default: '10.0'
  skip_final_snapshot:
    description: Determines whether a final DB snapshot is created before the DB cluster
      is deleted
    type: bool
    default: false
  final_snapshot_identifier:
    type: string
    description: The name of your final DB snapshot when this DB cluster is deleted
    default: aurora-cluster-snapshot-final
  backup_retention_period:
    type: number
    description: The days to retain backups for
    default: 10
  preferred_backup_window:
    description: The daily time range during which automated backups are created if
      automated backups are enabled using the BackupRetentionPeriod parameter
    type: string
    default: 02:00-03:00
  password_length:
    type: number
    description: The length of the password string
    default: 32
  db_kms_key_id:
    default: ''
  deploy_aurora:
    default: false
  deploy_rds:
    default: true
  use_asg:
    default: true
  use_karpenter:
    default: false
  deploy_karpenter_in_k8s:
    default: false
    description: Allows you to enable the Karpenter Helm chart and associated resources
      without deploying the other parts of karpenter (i.e. the roles, permissions,
      and SQS queue)
  karpenter_version:
    default: v0.32.9
  deploy_cloud_trail:
    default: true
  send_logs_to_csoc:
    default: true
  route_table_name:
    default: eks_private
    description: Name of the route table to use for the peering connection
    type: string
  eks_public_access:
    default: 'true'
  deploy_gen3:
    default: false
  ambassador_enabled:
    description: Enable ambassador
    type: bool
    default: true
  arborist_enabled:
    description: Enable arborist
    type: bool
    default: true
  argo_enabled:
    description: Enable argo
    type: bool
    default: true
  audit_enabled:
    description: Enable audit
    type: bool
    default: true
  aws-es-proxy_enabled:
    description: Enable aws-es-proxy
    type: bool
    default: true
  dbgap_enabled:
    description: Enable dbgap sync in the usersync job
    type: bool
    default: false
  dd_enabled:
    description: Enable datadog
    type: bool
    default: false
  dictionary_url:
    description: URL to the data dictionary
    default: ''
  dispatcher_job_number:
    description: Number of dispatcher jobs
    default: 10
  fence_enabled:
    description: Enable fence
    type: bool
    default: true
  guppy_enabled:
    description: Enable guppy
    type: bool
    default: true
  hatchery_enabled:
    description: Enable hatchery
    type: bool
    default: true
  indexd_enabled:
    description: Enable indexd
    type: bool
    default: true
  indexd_prefix:
    description: Indexd prefix
    default: dg.XXXX/
  ingress_enabled:
    description: Create ALB ingress
    type: bool
    default: true
  manifestservice_enabled:
    description: Enable manfiestservice
    type: bool
    default: true
  metadata_enabled:
    description: Enable metadata
    type: bool
    default: true
  netpolicy_enabled:
    description: Enable network policy security rules
    type: bool
    default: false
  peregrine_enabled:
    description: Enable perergrine
    type: bool
    default: true
  pidgin_enabled:
    description: Enable pidgin
    type: bool
    default: false
  portal_enabled:
    description: Enable portal
    type: bool
    default: true
  public_datasets:
    description: whether the datasets are public
    type: bool
    default: false
  requestor_enabled:
    description: Enable requestor
    type: bool
    default: false
  revproxy_arn:
    description: ARN for the revproxy cert in ACM
    default: ''
  revproxy_enabled:
    description: Enable revproxy
    type: bool
    default: true
  sheepdog_enabled:
    description: Enable sheepdog
    type: bool
    default: true
  slack_send_dbgap:
    description: Enable slack message for usersync job
    type: bool
    default: false
  ssjdispatcher_enabled:
    description: Enable ssjdispatcher
    type: bool
    default: true
  tier_access_level:
    description: Tier access level for guppy
    default: private
  tier_access_limit:
    description: value for tier access limit
    default: '100'
  usersync_enabled:
    description: Enable usersync cronjob
    type: bool
    default: true
  usersync_schedule:
    description: Cronjob schedule for usersync
    default: '*/30 * * * *'
  useryaml_s3_path:
    description: S3 path to the user.yaml file
    default: s3://cdis-gen3-users/dev/user.yaml
  wts_enabled:
    description: Enable wts
    type: bool
    default: true
  fence_config_path:
    default: ''
  useryaml_path:
    default: ''
  gitops_path:
    default: ''
  google_client_id:
    default: ''
    sensitive: true
  google_client_secret:
    default: ''
    sensitive: true
  fence_access_key:
    default: ''
    sensitive: true
  fence_secret_key:
    default: ''
    sensitive: true
  upload_bucket:
    default: ''
  namespace:
    default: default
  secrets_manager_enabled:
    default: true
  ci_run:
    default: false
  commons_log_retention:
    description: value in days for the cloudwatch log retention period
    default: '3650'
  enable_vpc_endpoints:
    default: true
  deploy_es_role:
    default: false
  deploy_waf:
    default: false
  k8s_bootstrap_resources:
    default: true
    description: If set to true, creates resources for bootstrapping a kubernetes
      cluster (such as karpenter configs and helm releases)
  base_rules:
    description: Base AWS Managed Rules
    type: '${list(object({"managed_rule_group_name": "string", "priority": "number",
      "override_to_count": "${list(string)}"}))}'
    default:
      managed_rule_group_name: AWSManagedRulesWordPressRuleSet
      priority: 2
      override_to_count: WordPressExploitableCommands_QUERYSTRING WordPressExploitablePaths_URIPATH
  additional_rules:
    description: Additional AWS Managed Rules
    type: '${list(object({"managed_rule_group_name": "string", "priority": "number",
      "override_to_count": "${list(string)}"}))}'
    default: []
  ssh_key_name:
    description: ssh key name that instances in the cluster will use
  squid_instance_drive_size:
    description: Size of the root volume for the instance
    default: 8
  squid_instance_type:
    description: instance type that replicas of squid will be deployed into
    default: t3.medium
  squid_bootstrap_script:
    description: Script to run on deployment for the HA squid instances
    default: squid_running_on_docker.sh
  squid_extra_vars:
    description: additional variables to pass along with the bootstrapscript
  squid_cluster_desired_capasity:
    description: If ha squid is enabled and you want to set your own capasity
    default: 2
  squid_cluster_min_size:
    description: If ha squid is enabled and you want to set your own min size
    default: 1
  squid_cluster_max_size:
    description: If ha squid is enabled and you want to set your own max size
    default: 3
  bucket_name: {}
  bucket_access_arns:
    description: When fence bot has to access another bucket that wasn't created by
      the VPC module
    default: []
  env_vpc_cidr:
    description: CIDR of the VPC where this cluster will reside
  squid_proxy_subnet: {}
  env_vpc_name: {}
  env_squid_name: {}
  image_name_search_criteria:
    default: al2023-ami-*
  bootstrap_path:
    default: cloud-automation/flavors/squid_auto/
  env_log_group:
    description: log group in which to send logs from the instance
  env_vpc_id:
    description: the vpc id where the proxy cluster will reside
  squid_availability_zones:
    description: AZs on wich to associate the routes for the squid proxies
  main_public_route:
    description: The route table that allows public access
  route_53_zone_id:
    description: DNS zone for .internal.io
  extra_vars:
    description: additional variables to pass along with the bootstrapscript
    default: squid_image=master
  cluster_desired_capasity:
    description: Desired capasity for the ha squid proxy
    default: 2
  cluster_max_size:
    description: Max size of the autoscaling group
    default: 3
  cluster_min_size:
    description: Min size of the autoscaling group
    default: 1
  squid_depends_on:
    default: ''
  environment: {}
  cloudwatchlogs_group: {}
  bucket_arn: {}
  bucket_id: {}
  configure_bucket_notifications:
    default: true
  vpc_id:
    default: ''
  instance_count:
    default: 3
  role_arn:
    description: The ARN of the role to use for ES
    default: ''
  ssl_certificate_id:
    default: AWS-CERTIFICATE-ID
  db_fence_name:
    default: fence
  db_fence_password: {}
  db_fence_username:
    default: fence_user
  db_fence_address: {}
  db_indexd_name:
    default: indexd
  db_indexd_password: {}
  db_indexd_username:
    default: indexd_user
  db_indexd_address: {}
  db_sheepdog_password: {}
  db_peregrine_password: {}
  db_sheepdog_username:
    default: sheepdog
  db_sheepdog_name:
    default: sheepdog
  db_sheepdog_address: {}
  db_peregrine_address: {}
  aws_user_key: {}
  aws_user_key_id: {}
  csoc_vpc_id:
    description: VPC ID of the peering connection
    type: string
    default: vpc-e2b51d99
  csoc_cidr:
    description: CIDR block of the peering connection
    type: string
    default: ''
  pcx_id:
    description: ID of the peering connection
    type: string
    default: ''
  aurora_username:
    description: aurora username
    default: ''
  aurora_hostname:
    description: aurora hostname
    default: ''
  aurora_password:
    description: aurora password
    default: ''
  deploy_external_secrets:
    description: Deploy external secrets
    type: bool
    default: false
  deploy_grafana:
    description: Deploy grafana
    type: bool
    default: false
  deploy_s3_mountpoint:
    description: Deploy s3 mountpoints
    type: bool
    default: false
  dicom-server_enabled:
    description: Enable dicom
    type: bool
    default: false
  dicom-viewer_enabled:
    description: Enable dicom server
    type: bool
    default: false
  es_endpoint:
    description: Elasticsearch endpoint
    default: ''
  es_user_key:
    description: Elasticsearch user access key
    default: ''
  es_user_secret:
    description: Elasticsearch user secret key
    default: ''
  gen3ff_enabled:
    description: Enable gen3ff
    type: bool
    default: false
  gen3ff_repo:
    description: Gen3ff repo
    default: quay.io/cdis/frontend-framework
  gen3ff_tag:
    description: Gen3ff tag
    default: main
  sower_enabled:
    description: Enable sower
    type: bool
    default: true
  cluster_endpoint:
    default: ''
  cluster_ca_cert:
    default: ''
  cluster_name:
    default: ''
  oidc_provider_arn:
    default: ''
  waf_arn:
    default: ''
  service:
    default: ''
  admin_database_username:
    default: postgres
  admin_database_name:
    default: postgres
  admin_database_password:
    default: ''
  role:
    default: ''
  database_name:
    default: ''
  username:
    default: ''
  password:
    default: ''
  dump_file_to_restore:
    default: ''
  dump_file_storage_location:
    default: ''
  db_restore:
    default: false
  db_dump:
    default: false
  db_job_role_arn:
    default: ''
  secret: {}
  secret_name: {}
  bucket_ownership:
    default: BucketOwnerEnforced
  logging_bucket_name:
    type: string
    default: ''
  aes_encryption:
    default: false
  kms_key_id:
    description: The KMS key to use for the bucket
    default: ''
  bucket_lifecycle_configuration:
    default: ''
  public_access_block:
    default: true
  block_public_acls:
    default: true
  block_public_policy:
    default: true
  ignore_public_acls:
    default: true
  restrict_public_buckets:
    default: true
  versioning:
    default: false
  policy_role_arn:
    default: ''
  policy_actions:
    type: ${list(string)}
    default: s3:GetObject s3:PutObject s3:DeleteObject
  sqs_name: {}
