data:
- aws_availability_zones:
    available: {}
- aws_caller_identity:
    current: {}
- aws_ecrpublic_authorization_token:
    token: {}
- aws_rds_engine_version:
    postgresql:
      engine: aurora-postgresql
      version: '14.5'
- aws_iam_policy_document:
    aws_load_balancer_controller:
      statement:
      - actions:
        - iam:CreateServiceLinkedRole
        effect: Allow
        resources:
        - '*'
        condition:
        - test: StringEquals
          variable: iam:AWSServiceName
          values:
          - elasticloadbalancing.amazonaws.com
      - actions:
        - ec2:DescribeAccountAttributes
        - ec2:DescribeAddresses
        - ec2:DescribeAvailabilityZones
        - ec2:DescribeInternetGateways
        - ec2:DescribeVpcs
        - ec2:DescribeVpcPeeringConnections
        - ec2:DescribeSubnets
        - ec2:DescribeSecurityGroups
        - ec2:DescribeInstances
        - ec2:DescribeNetworkInterfaces
        - ec2:DescribeTags
        - ec2:GetCoipPoolUsage
        - ec2:DescribeCoipPools
        - elasticloadbalancing:DescribeLoadBalancers
        - elasticloadbalancing:DescribeLoadBalancerAttributes
        - elasticloadbalancing:DescribeListeners
        - elasticloadbalancing:DescribeListenerCertificates
        - elasticloadbalancing:DescribeSSLPolicies
        - elasticloadbalancing:DescribeRules
        - elasticloadbalancing:DescribeTargetGroups
        - elasticloadbalancing:DescribeTargetGroupAttributes
        - elasticloadbalancing:DescribeTargetHealth
        - elasticloadbalancing:DescribeTags
        effect: Allow
        resources:
        - '*'
      - actions:
        - cognito-idp:DescribeUserPoolClient
        - acm:ListCertificates
        - acm:DescribeCertificate
        - iam:ListServerCertificates
        - iam:GetServerCertificate
        - waf-regional:GetWebACL
        - waf-regional:GetWebACLForResource
        - waf-regional:AssociateWebACL
        - waf-regional:DisassociateWebACL
        - wafv2:GetWebACL
        - wafv2:GetWebACLForResource
        - wafv2:AssociateWebACL
        - wafv2:DisassociateWebACL
        - shield:GetSubscriptionState
        - shield:DescribeProtection
        - shield:CreateProtection
        - shield:DeleteProtection
        effect: Allow
        resources:
        - '*'
      - actions:
        - ec2:AuthorizeSecurityGroupIngress
        - ec2:RevokeSecurityGroupIngress
        effect: Allow
        resources:
        - '*'
      - actions:
        - ec2:CreateSecurityGroup
        effect: Allow
        resources:
        - '*'
      - actions:
        - ec2:CreateTags
        effect: Allow
        resources:
        - arn:aws:ec2:*:*:security-group/*
        condition:
        - test: StringEquals
          variable: ec2:CreateAction
          values:
          - CreateSecurityGroup
        - test: 'Null'
          variable: aws:RequestTag/elbv2.k8s.aws/cluster
          values:
          - 'false'
      - actions:
        - ec2:AuthorizeSecurityGroupIngress
        - ec2:RevokeSecurityGroupIngress
        - ec2:DeleteSecurityGroup
        effect: Allow
        resources:
        - '*'
        condition:
        - test: 'Null'
          variable: ec2:ResourceTag/elbv2.k8s.aws/cluster
          values:
          - 'false'
      - actions:
        - elasticloadbalancing:CreateLoadBalancer
        - elasticloadbalancing:CreateTargetGroup
        effect: Allow
        resources:
        - '*'
        condition:
        - test: 'Null'
          variable: aws:RequestTag/elbv2.k8s.aws/cluster
          values:
          - 'false'
      - actions:
        - elasticloadbalancing:CreateListener
        - elasticloadbalancing:DeleteListener
        - elasticloadbalancing:CreateRule
        - elasticloadbalancing:DeleteRule
        effect: Allow
        resources:
        - '*'
      - actions:
        - elasticloadbalancing:AddTags
        - elasticloadbalancing:RemoveTags
        effect: Allow
        resources:
        - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
        - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
        - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
        condition:
        - test: 'Null'
          variable: aws:RequestTag/elbv2.k8s.aws/cluster
          values:
          - 'true'
        - test: 'Null'
          variable: aws:ResourceTag/elbv2.k8s.aws/cluster
          values:
          - 'false'
      - actions:
        - elasticloadbalancing:AddTags
        - elasticloadbalancing:RemoveTags
        effect: Allow
        resources:
        - arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*
        - arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*
        - arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*
        - arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*
      - actions:
        - elasticloadbalancing:ModifyLoadBalancerAttributes
        - elasticloadbalancing:SetIpAddressType
        - elasticloadbalancing:SetSecurityGroups
        - elasticloadbalancing:SetSubnets
        - elasticloadbalancing:DeleteLoadBalancer
        - elasticloadbalancing:ModifyTargetGroup
        - elasticloadbalancing:ModifyTargetGroupAttributes
        - elasticloadbalancing:DeleteTargetGroup
        effect: Allow
        resources:
        - '*'
        condition:
        - test: StringEquals
          variable: aws:ResourceTag/elbv2.k8s.aws/cluster
          values:
          - 'false'
      - actions:
        - elasticloadbalancing:RegisterTargets
        - elasticloadbalancing:DeregisterTargets
        effect: Allow
        resources:
        - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
      - actions:
        - elasticloadbalancing:SetWebAcl
        - elasticloadbalancing:ModifyListener
        - elasticloadbalancing:AddListenerCertificates
        - elasticloadbalancing:RemoveListenerCertificates
        - elasticloadbalancing:ModifyRule
        effect: Allow
        resources:
        - '*'
- aws_iam_policy_document:
    alb_ingress_controller_assume_role:
      statement:
      - actions:
        - sts:AssumeRole
        effect: Allow
        principals:
        - type: Service
          identifiers:
          - ec2.amazonaws.com
      - actions:
        - sts:AssumeRoleWithWebIdentity
        effect: Allow
        principals:
        - type: Federated
          identifiers:
          - ${module.eks.oidc_provider_arn}
        condition:
        - test: StringEquals
          variable: ${module.eks.oidc_provider}:aud
          values:
          - sts.amazonaws.com
        - test: StringEquals
          variable: ${module.eks.oidc_provider}:sub
          values:
          - system:serviceaccount:kube-system:aws-load-balancer-controller
