data:
- aws_caller_identity:
    current: {}
- aws_region:
    current: {}
- aws_vpc:
    the_vpc:
      id: ${data.aws_vpcs.vpcs.ids[0]}
- aws_availability_zones:
    available:
      state: available
- aws_vpcs:
    vpcs:
      tags:
        Name: ${var.vpc_name}
- aws_nat_gateway:
    the_gateway:
      vpc_id: ${data.aws_vpc.the_vpc.id}
      tags:
        Name: ${var.vpc_name}-ngw
      state: available
- aws_vpc_peering_connection:
    pc:
      vpc_id: ${data.aws_vpc.the_vpc.id}
      peer_owner_id: ${var.csoc_account_id}
      status: active
- aws_vpc_endpoint_service:
    logs:
      service: logs
- aws_vpc_endpoint_service:
    ec2:
      service: ec2
- aws_vpc_endpoint_service:
    autoscaling:
      service: autoscaling
- aws_vpc_endpoint_service:
    ecr_dkr:
      service: ecr.dkr
- aws_vpc_endpoint_service:
    ecr_api:
      service: ecr.api
- aws_vpc_endpoint_service:
    ebs:
      service: ebs
- aws_vpc_endpoint_service:
    sts:
      service: sts
- aws_route_table:
    public_kube:
      vpc_id: ${data.aws_vpc.the_vpc.id}
      tags:
        Name: main
- aws_ami:
    eks_worker:
      filter:
      - name: name
        values:
        - amazon-eks-node-${var.eks_version}*
      most_recent: true
      owners:
      - '602401143452'
- aws_security_group:
    local_traffic:
      vpc_id: ${data.aws_vpc.the_vpc.id}
      name: local
- aws_autoscaling_group:
    squid_auto:
      count: '${var.ha_squid ? 1 : 0}'
      name: squid-auto-${var.vpc_name}
- aws_instances:
    squid_proxy:
      count: '${var.ha_squid ? var.dual_proxy ? 1 : 0 : 1}'
      instance_tags:
        Name: ${var.vpc_name}${var.proxy_name}
- aws_route_table:
    private_kube_route_table:
      vpc_id: ${data.aws_vpc.the_vpc.id}
      tags:
        Name: private_kube
- aws_route53_zone:
    vpczone:
      name: internal.io.
      vpc_id: ${data.aws_vpc.the_vpc.id}
- archive_file:
    lambda_function:
      type: zip
      source_file: ${path.module}/lambda_function.py
      output_path: lambda_function_payload.zip
- aws_iam_policy_document:
    with_resources:
      statement:
      - actions:
        - ec2:CreateRoute
        - ec2:DeleteRoute
        - ec2:ReplaceRoute
        - route53:GetHostedZone
        - route53:ChangeResourceRecordSets
        - route53:ListResourceRecordSets
        effect: Allow
        resources:
        - arn:aws:ec2:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:route-table/${aws_route_table.eks_private.id}
        - arn:aws:ec2:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:route-table/${data.aws_route_table.private_kube_route_table.id}
        - arn:aws:route53:::hostedzone/${data.aws_route53_zone.vpczone.zone_id}
- aws_iam_policy_document:
    without_resources:
      statement:
      - actions:
        - autoscaling:DescribeAutoScalingInstances
        - route53:CreateHostedZone
        - ec2:DescribeInstances
        - route53:ListHostedZones
        - ec2:DeleteNetworkInterface
        - ec2:DisassociateRouteTable
        - ec2:DescribeSecurityGroups
        - ec2:AssociateRouteTable
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - autoscaling:DescribeAutoScalingGroups
        - ec2:DescribeVpcs
        - ec2:DescribeSubnets
        - ec2:DescribeRouteTables
        - ec2:DescribeInstanceAttribute
        - ec2:ModifyInstanceAttribute
        effect: Allow
        resources:
        - '*'
- aws_iam_policy_document:
    planx-csoc-alerts-topic_access:
      count: '${var.sns_topic_arn != "" ? 1 : 0}'
      statement:
      - actions:
        - sns:Publish
        effect: Allow
        resources:
        - ${var.sns_topic_arn}
- aws_ecrpublic_authorization_token:
    token: {}
