resource:
- aws_db_instance:
    db_fence:
      count: '${var.deploy_fence_db && var.deploy_rds ? 1 : 0}'
      allocated_storage: ${var.fence_db_size}
      identifier: ${var.vpc_name}-fencedb
      storage_type: gp2
      engine: postgres
      engine_version: ${var.engine_version}
      parameter_group_name: ${aws_db_parameter_group.rds-cdis-pg.name}
      instance_class: ${var.fence_db_instance}
      db_name: ${var.fence_database_name}
      username: ${var.fence_db_username}
      password: '${var.db_password_fence != "" ? var.db_password_fence : random_password.fence_password.result}'
      snapshot_identifier: ${var.fence_snapshot}
      db_subnet_group_name: ${aws_db_subnet_group.private_group.id}
      vpc_security_group_ids:
      - ${module.cdis_vpc.security_group_local_id}
      allow_major_version_upgrade: ${var.fence_allow_major_version_upgrade}
      final_snapshot_identifier: ${replace(var.vpc_name, "_", "-")}-fencedb
      maintenance_window: ${var.fence_maintenance_window}
      backup_retention_period: ${var.fence_backup_retention_period}
      backup_window: ${var.fence_backup_window}
      multi_az: ${var.fence_ha}
      auto_minor_version_upgrade: ${var.fence_auto_minor_version_upgrade}
      storage_encrypted: ${var.rds_instance_storage_encrypted}
      max_allocated_storage: ${var.fence_max_allocated_storage}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
      - prevent_destroy: true
        ignore_changes: ${all}
- aws_db_instance:
    db_sheepdog:
      count: '${var.deploy_sheepdog_db && var.deploy_rds ? 1 : 0}'
      allocated_storage: ${var.sheepdog_db_size}
      identifier: ${var.vpc_name}-sheepdog
      storage_type: gp2
      engine: postgres
      engine_version: ${var.engine_version}
      parameter_group_name: ${aws_db_parameter_group.rds-cdis-pg.name}
      instance_class: ${var.sheepdog_db_instance}
      db_name: ${var.sheepdog_database_name}
      username: ${var.sheepdog_db_username}
      password: '${var.db_password_sheepdog != "" ? var.db_password_sheepdog : random_password.sheepdog_password.result}'
      snapshot_identifier: ${var.sheepdog_snapshot}
      db_subnet_group_name: ${aws_db_subnet_group.private_group.id}
      vpc_security_group_ids:
      - ${module.cdis_vpc.security_group_local_id}
      allow_major_version_upgrade: ${var.sheepdog_allow_major_version_upgrade}
      final_snapshot_identifier: ${replace(var.vpc_name, "_", "-")}-sheepdogdb
      maintenance_window: ${var.sheepdog_maintenance_window}
      backup_retention_period: ${var.sheepdog_backup_retention_period}
      backup_window: ${var.sheepdog_backup_window}
      multi_az: ${var.sheepdog_ha}
      auto_minor_version_upgrade: ${var.sheepdog_auto_minor_version_upgrade}
      storage_encrypted: ${var.rds_instance_storage_encrypted}
      max_allocated_storage: ${var.sheepdog_max_allocated_storage}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
      - prevent_destroy: true
        ignore_changes: ${all}
- aws_db_instance:
    db_indexd:
      count: '${var.deploy_indexd_db && var.deploy_rds ? 1 : 0}'
      allocated_storage: ${var.indexd_db_size}
      identifier: ${var.vpc_name}-indexddb
      storage_type: gp2
      engine: postgres
      engine_version: ${var.engine_version}
      parameter_group_name: ${aws_db_parameter_group.rds-cdis-pg.name}
      instance_class: ${var.indexd_db_instance}
      db_name: ${var.indexd_database_name}
      username: ${var.indexd_db_username}
      password: '${var.db_password_indexd != "" ? var.db_password_indexd : random_password.indexd_password.result}'
      snapshot_identifier: ${var.indexd_snapshot}
      db_subnet_group_name: ${aws_db_subnet_group.private_group.id}
      vpc_security_group_ids:
      - ${module.cdis_vpc.security_group_local_id}
      allow_major_version_upgrade: ${var.indexd_allow_major_version_upgrade}
      final_snapshot_identifier: ${replace(var.vpc_name, "_", "-")}-indexddb
      maintenance_window: ${var.indexd_maintenance_window}
      backup_retention_period: ${var.indexd_backup_retention_period}
      backup_window: ${var.indexd_backup_window}
      multi_az: ${var.indexd_ha}
      auto_minor_version_upgrade: ${var.indexd_auto_minor_version_upgrade}
      storage_encrypted: ${var.rds_instance_storage_encrypted}
      max_allocated_storage: ${var.indexd_max_allocated_storage}
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
      lifecycle:
      - prevent_destroy: true
        ignore_changes: ${all}
- aws_db_parameter_group:
    rds-cdis-pg:
      name: ${var.vpc_name}-rds-cdis-pg
      family: postgres${local.pg_family_version}
      parameter:
      - name: cpu_index_tuple_cost
        value: '0.000005'
      - name: cpu_tuple_cost
        value: '0.7'
      - name: log_duration
        value: '1'
      - name: log_min_duration_statement
        value: '0'
      - name: random_page_cost
        value: '0.7'
      - name: password_encryption
        value: scram-sha-256
      lifecycle:
      - ignore_changes: ${all}
- aws_kms_key:
    kube_key:
      description: encryption/decryption key for kubernete
      enable_key_rotation: true
      tags:
        Environment: ${var.vpc_name}
        Organization: ${var.organization_name}
- aws_kms_alias:
    kube_key:
      name: alias/${var.vpc_name}-k8s
      target_key_id: ${aws_kms_key.kube_key.key_id}
- aws_key_pair:
    automation_dev:
      key_name: ${var.vpc_name}_automation_dev
      public_key: ${var.kube_ssh_key}
- aws_iam_policy:
    configbucket_reader:
      name: bucket_reader_cdis-gen3-users_${var.vpc_name}
      description: Read cdis-gen3-users/${var.config_folder}
      policy: ${data.aws_iam_policy_document.configbucket_reader.json}
      lifecycle:
      - ignore_changes:
        - ${policy}
locals:
- pg_family_version: ${replace(var.engine_version, "/\\.[0-9]/", "")}
data:
- aws_iam_policy_document:
    configbucket_reader:
      statement:
      - actions:
        - s3:Get*
        - s3:List*
        effect: Allow
        resources:
        - arn:aws:s3:::${var.users_bucket_name}
        - arn:aws:s3:::${var.users_bucket_name}/${var.config_folder}/*
        - arn:aws:s3:::qualys-agentpackage
        - arn:aws:s3:::qualys-agentpackage/*
