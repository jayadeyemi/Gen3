data:
- aws_caller_identity:
    current: {}
---
module:
- arborist-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.arborist_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: arborist
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- argo-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.argo_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: argo
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- audit-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.audit_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: audit
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- dicom-viewer-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.dicom-viewer_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: dicom
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- dicom-server-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.dicom-server_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: dicom-server
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- fence-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.fence_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: fence
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- indexd-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.indexd_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: indexd
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- metadata-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.metadata_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: metadata
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- requestor-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.requestor_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: requestor
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- sheepdog-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.sheepdog_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: sheepdog
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
- wts-db:
    admin_database_password: ${var.aurora_password}
    admin_database_username: ${var.aurora_username}
    count: '${var.wts_enabled ? 1 : 0}'
    namespace: ${var.namespace}
    secrets_manager_enabled: true
    service: wts
    source: ../aws/aurora_db
    vpc_name: ${var.vpc_name}
---
locals:
- values: '${templatefile("${path.module}/values.tftpl", {"account_id": "${data.aws_caller_identity.current.account_id}",
    "namespace": "${var.namespace}", "ambassador_enabled": "${var.ambassador_enabled}",
    "arborist_enabled": "${var.arborist_enabled}", "argo_enabled": "${var.argo_enabled}",
    "audit_enabled": "${var.audit_enabled}", "audit_service_account": "${aws_iam_role.audit-role[0].arn}",
    "aurora_hostname": "${var.aurora_hostname}", "aurora_username": "${var.aurora_username}",
    "aurora_password": "${var.aurora_password}", "aws-es-proxy_enabled": "${var.aws-es-proxy_enabled}",
    "dbgap_enabled": "${var.dbgap_enabled}", "dd_enabled": "${var.dd_enabled}", "external_secrets_operator_iam_role":
    "${aws_iam_role.external-secrets-role[0].arn}", "deploy_grafana": "${var.deploy_grafana}",
    "deploy_s3_mountpoint": "${var.deploy_s3_mountpoint}", "dicom-server_enabled":
    "${var.dicom-server_enabled}", "dicom-viewer_enabled": "${var.dicom-viewer_enabled}",
    "dictionary_url": "${var.dictionary_url}", "dispatcher_job_number": "${var.dispatcher_job_number}",
    "es_endpoint": "${var.es_endpoint}", "es_secret_name": "${aws_secretsmanager_secret.es_user_creds.name}",
    "fence_config_secret_name": "${aws_secretsmanager_secret.fence_config.name}",
    "fence_enabled": "${var.fence_enabled}", "fence_service_account": "${aws_iam_role.fence-role[0].arn}",
    "frontend_root": "${var.gen3ff_enabled ? "gen3ff" : "portal"}", "gitops_file":
    "${var.gitops_path != "" ? indent(4, file(var.gitops_path)) : "{}"}", "gen3ff_enabled":
    "${var.gen3ff_enabled}", "gen3ff_repo": "${var.gen3ff_repo}", "gen3ff_tag": "${var.gen3ff_tag}",
    "guppy_enabled": "${var.guppy_enabled}", "hatchery_enabled": "${var.hatchery_enabled}",
    "hatchery_service_account": "${aws_iam_role.hatchery-role[0].arn}", "hostname":
    "${var.hostname}", "indexd_enabled": "${var.indexd_enabled}", "indexd_prefix":
    "${var.indexd_prefix}", "ingress_enabled": "${var.ingress_enabled}", "manifestservice_enabled":
    "${var.manifestservice_enabled}", "metadata_enabled": "${var.metadata_enabled}",
    "netpolicy_enabled": "${var.netpolicy_enabled}", "peregrine_enabled": "${var.peregrine_enabled}",
    "pidgin_enabled": "${var.pidgin_enabled}", "portal_enabled": "${var.portal_enabled}",
    "public_datasets": "${var.public_datasets}", "requestor_enabled": "${var.requestor_enabled}",
    "revproxy_arn": "${var.revproxy_arn}", "revproxy_enabled": "${var.revproxy_enabled}",
    "sheepdog_enabled": "${var.sheepdog_enabled}", "slack_send_dbgap": "${var.slack_send_dbgap}",
    "slack_webhook": "${var.slack_webhook}", "ssjdispatcher_enabled": "${var.ssjdispatcher_enabled}",
    "sower_enabled": "${var.sower_enabled}", "tier_access_level": "${var.tier_access_level}",
    "tier_access_limit": "${var.tier_access_limit}", "usersync_enabled": "${var.usersync_enabled}",
    "usersync_schedule": "${var.usersync_schedule}", "user_yaml": "${var.useryaml_path
    != "" ? indent(4, file(var.useryaml_path)) : "{}"}", "useryaml_s3_path": "${var.useryaml_s3_path}",
    "vpc_name": "${var.vpc_name}", "waf_arn": "${var.waf_arn}", "wts_enabled": "${var.wts_enabled}"})}'
resource:
- helm_release:
    gen3:
      chart: gen3
      count: '${var.deploy_gen3 ? 1 : 0}'
      create_namespace: true
      name: ${var.namespace}
      namespace: ${var.namespace}
      repository: http://helm.gen3.org
      values:
      - ${local.values}
      wait: false
- local_file:
    values:
      content: ${local.values}
      count: '${var.deploy_gen3 ? 1 : 0}'
      filename: values.yaml
---
module:
- manifest-s3-bucket:
    bucket_name: manifestservice-${var.vpc_name}-${var.namespace}
    source: ../aws/modules/generic-bucket
- grafana-s3-bucket:
    bucket_name: ${var.vpc_name}-observability-bucket
    count: '${var.namespace == "default" && var.deploy_grafana ? 1 : 0}'
    source: ../aws/modules/generic-bucket
---
resource:
- aws_secretsmanager_secret:
    secret:
      name: ${var.vpc_name}_${var.namespace}-values
- aws_secretsmanager_secret_version:
    secret:
      secret_id: ${aws_secretsmanager_secret.secret.id}
      secret_string: ${local.values}
- aws_secretsmanager_secret:
    fence_config:
      name: ${var.vpc_name}_${var.namespace}-fence-config
- aws_secretsmanager_secret_version:
    fence_config:
      lifecycle:
      - ignore_changes:
        - ${secret_string}
      secret_id: ${aws_secretsmanager_secret.fence_config.id}
      secret_string: '${var.fence_config_path != "" ? file(var.fence_config_path)
        : templatefile("${path.module}/fence-config.tftpl", {"hostname": "${var.hostname}",
        "google_client_id": "${var.google_client_id}", "google_client_secret": "${var.google_client_secret}",
        "fence_access_key": "${var.fence_access_key}", "fence_secret_key": "${var.fence_secret_key}",
        "upload_bucket": "${var.upload_bucket}"})}'
- aws_secretsmanager_secret:
    es_user_creds:
      name: ${var.vpc_name}_${var.namespace}-aws-es-proxy-creds
- aws_secretsmanager_secret_version:
    es_user_creds:
      secret_id: ${aws_secretsmanager_secret.fence_config.id}
      secret_string: '${templatefile("${path.module}/aws-user-creds.tftpl", {"access_key":
        "${var.es_user_key}", "access_secret": "${var.es_user_secret}"})}'
---
resource:
- aws_iam_role:
    audit-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:${var.namespace}:audit-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.audit_enabled ? 1 : 0}'
      description: Role for ES proxy service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-audit-sa
      path: /gen3-service/
- aws_iam_role_policy:
    audit-role-policy:
      name: audit-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["sqs:ReceiveMessage",
        "sqs:GetQueueAttributes", "sqs:DeleteMessage"], "Effect": "Allow", "Resource":
        ["${module.audit-sqs.sqs-arn}"]}]})}'
      role: ${aws_iam_role.audit-role[0].id}
- aws_iam_role:
    fence-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:${var.namespace}:fence-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.fence_enabled ? 1 : 0}'
      description: Role for ES proxy service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-fence-sa
      path: /gen3-service/
- aws_iam_role_policy:
    fence-role-policy:
      name: fence-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["sqs:SendMessage"],
        "Effect": "Allow", "Resource": ["${module.audit-sqs.sqs-arn}"]}]})}'
      role: ${aws_iam_role.fence-role[0].id}
- aws_iam_role:
    gitops-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:${var.namespace}:gitops-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      description: Role for gitops service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-gitops-sa
      path: /gen3-service/
- aws_iam_role_policy:
    gitops-role-policy:
      name: gitops-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["s3:List*",
        "s3:Get*"], "Effect": "Allow", "Resource": ["arn:aws:s3:::dashboard-${data.aws_caller_identity.current.account_id}-${var.vpc_name}-gen3/*",
        "arn:aws:s3:::dashboard-${data.aws_caller_identity.current.account_id}-${var.vpc_name}-gen3"]},
        {"Action": ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"], "Effect":
        "Allow", "Resource": "arn:aws:s3:::dashboard-${data.aws_caller_identity.current.account_id}-${var.vpc_name}-gen3/*"}]})}'
      role: ${aws_iam_role.gitops-role.id}
- aws_iam_role:
    hatchery-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:${var.namespace}:hatchery-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.hatchery_enabled ? 1 : 0}'
      description: Role for ES proxy service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-hatchery-sa
      path: /gen3-service/
- aws_iam_role_policy:
    hatchery-role-policy:
      name: hatchery-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["sts:AssumeRole"],
        "Effect": "Allow", "Resource": ["arn:aws:iam::*:role/csoc_adminvm*"]}, {"Action":
        ["ec2:*"], "Effect": "Allow", "Resource": "*"}]})}'
      role: ${aws_iam_role.hatchery-role[0].id}
- aws_iam_role_policy_attachment:
    hatchery-role-policy-attachment:
      count: '${var.hatchery_enabled ? 1 : 0}'
      policy_arn: arn:aws:iam::aws:policy/AWSResourceAccessManagerFullAccess
      role: ${aws_iam_role.hatchery-role[0].name}
- aws_iam_role:
    manifestservice-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:${var.namespace}:manifestservice-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.manifestservice_enabled ? 1 : 0}'
      description: Role for manifestservice service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-manifestservice-sa
      path: /gen3-service/
- aws_iam_role_policy:
    manifestservice-role-policy:
      name: manifestservice-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["s3:List*",
        "s3:Get*"], "Effect": "Allow", "Resource": ["arn:aws:s3:::manifestservice-${var.vpc_name}-${var.namespace}/*",
        "arn:aws:s3:::manifestservice-${var.vpc_name}-${var.namespace}"]}, {"Action":
        ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"], "Effect": "Allow", "Resource":
        "arn:aws:s3:::manifestservice-${var.vpc_name}-${var.namespace}/*"}]})}'
      role: ${aws_iam_role.manifestservice-role[0].id}
- aws_iam_role:
    aws-load-balancer-controller-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:kube-system:aws-load-balancer-controller"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.namespace == "default" ? 1 : 0}'
      description: Role for ALB controller service account for ${var.vpc_name}
      name: ${var.vpc_name}-aws-load-balancer-controller-sa
      path: /gen3-service/
- aws_iam_role_policy:
    aws-load-balancer-role-policy:
      count: '${var.namespace == "default" ? 1 : 0}'
      name: aws-load-balancer-controller-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": "iam:createServiceLinkedRole",
        "Effect": "Allow", "Resource": "*", "Condition": {"StringEquals": {"iam:AWSServiceName":
        "elasticloadbalancing.amazonaws.com"}}}, {"Action": ["ec2:DescribeAccountAttributes",
        "ec2:DescribeAddresses", "ec2:DescribeAvailabilityZones", "ec2:DescribeInternetGateways",
        "ec2:DescribeVpcs", "ec2:DescribeVpcPeeringConnections", "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups", "ec2:DescribeInstances", "ec2:DescribeNetworkInterfaces",
        "ec2:DescribeTags", "ec2:GetCoipPoolUsage", "ec2:GetSecurityGroupsForVpc",
        "ec2:DescribeCoipPools", "elasticloadbalancing:DescribeLoadBalancers", "elasticloadbalancing:DescribeLoadBalancerAttributes",
        "elasticloadbalancing:DescribeListeners", "elasticloadbalancing:DescribeListenerCertificates",
        "elasticloadbalancing:DescribeSSLPolicies", "elasticloadbalancing:DescribeRules",
        "elasticloadbalancing:DescribeTargetGroups", "elasticloadbalancing:DescribeTargetGroupAttributes",
        "elasticloadbalancing:DescribeTargetHealth", "elasticloadbalancing:DescribeTags",
        "elasticloadbalancing:AddTags"], "Effect": "Allow", "Resource": "*"}, {"Action":
        ["cognito-idp:DescribeUserPoolClient", "acm:ListCertificates", "acm:DescribeCertificate",
        "iam:ListServerCertificates", "iam:GetServerCertificate", "waf-regional:GetWebACL",
        "waf-regional:GetWebACLForResource", "waf-regional:AssociateWebACL", "waf-regional:DisassociateWebACL",
        "wafv2:GetWebACL", "wafv2:GetWebACLForResource", "wafv2:AssociateWebACL",
        "wafv2:DisassociateWebACL", "shield:GetSubscriptionState", "shield:DescribeProtection",
        "shield:CreateProtection", "shield:DeleteProtection"], "Effect": "Allow",
        "Resource": "*"}, {"Action": ["ec2:AuthorizeSecurityGroupIngress", "ec2:RevokeSecurityGroupIngress"],
        "Effect": "Allow", "Resource": "*"}, {"Action": ["ec2:CreateSecurityGroup"],
        "Effect": "Allow", "Resource": "*"}, {"Action": ["ec2:CreateTags"], "Effect":
        "Allow", "Resource": "arn:aws:ec2:*:*:security-group/*", "Condition": {"StringEquals":
        {"ec2:CreateAction": "CreateSecurityGroup"}, "Null": {"aws:RequestTag/elbv2.k8s.aws/cluster":
        "false"}}}, {"Action": ["ec2:CreateTags", "ec2:DeleteTags"], "Effect": "Allow",
        "Resource": "arn:aws:ec2:*:*:security-group/*", "Condition": {"Null": {"aws:RequestTag/elbv2.k8s.aws/cluster":
        "true", "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"}}}, {"Action": ["ec2:AuthorizeSecurityGroupIngress",
        "ec2:RevokeSecurityGroupIngress", "ec2:DeleteSecurityGroup"], "Effect": "Allow",
        "Resource": "*", "Condition": {"Null": {"aws:ResourceTag/elbv2.k8s.aws/cluster":
        "false"}}}, {"Action": ["elasticloadbalancing:CreateLoadBalancer", "elasticloadbalancing:CreateTargetGroup"],
        "Effect": "Allow", "Resource": "*", "Condition": {"Null": {"aws:RequestTag/elbv2.k8s.aws/cluster":
        "false"}}}, {"Action": ["elasticloadbalancing:CreateListener", "elasticloadbalancing:DeleteListener",
        "elasticloadbalancing:CreateRule", "elasticloadbalancing:DeleteRule"], "Effect":
        "Allow", "Resource": "*"}, {"Action": ["elasticloadbalancing:AddTags", "elasticloadbalancing:RemoveTags"],
        "Effect": "Allow", "Resource": ["arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
        "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*", "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"],
        "Condition": {"Null": {"aws:RequestTag/elbv2.k8s.aws/cluster": "true", "aws:ResourceTag/elbv2.k8s.aws/cluster":
        "false"}}}, {"Action": ["elasticloadbalancing:AddTags", "elasticloadbalancing:RemoveTags"],
        "Effect": "Allow", "Resource": ["arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
        "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*", "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
        "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"]}, {"Action": ["elasticloadbalancing:ModifyLoadBalancerAttributes",
        "elasticloadbalancing:SetIpAddressType", "elasticloadbalancing:SetSecurityGroups",
        "elasticloadbalancing:SetSubnets", "elasticloadbalancing:DeleteLoadBalancer",
        "elasticloadbalancing:ModifyTargetGroup", "elasticloadbalancing:ModifyTargetGroupAttributes",
        "elasticloadbalancing:DeleteTargetGroup"], "Effect": "Allow", "Resource":
        "*", "Condition": {"Null": {"aws:ResourceTag/elbv2.k8s.aws/cluster": "false"}}},
        {"Action": ["elasticloadbalancing:RegisterTargets", "elasticloadbalancing:DeregisterTargets"],
        "Effect": "Allow", "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"},
        {"Action": ["elasticloadbalancing:SetWebAcl", "elasticloadbalancing:ModifyListener",
        "elasticloadbalancing:AddListenerCertificates", "elasticloadbalancing:RemoveListenerCertificates",
        "elasticloadbalancing:ModifyRule"], "Effect": "Allow", "Resource": "*"}]})}'
      role: ${aws_iam_role.aws-load-balancer-controller-role[0].id}
- aws_iam_role:
    external-secrets-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:${var.namespace}:secret-store-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.namespace == "default" || var.deploy_external_secrets ? 1 : 0}'
      description: Role for external-secrets service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-external-secrets-sa
      path: /gen3-service/
- aws_iam_role_policy:
    external-secrets-role-policy:
      count: '${var.namespace == "default" || var.deploy_external_secrets ? 1 : 0}'
      name: external-secrets-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["secretsmanager:ListSecrets",
        "secretsmanager:GetSecretValue"], "Effect": "Allow", "Resource": "*"}]})}'
      role: ${aws_iam_role.external-secrets-role[0].id}
- aws_iam_role:
    s3-mountpoint-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:kube-system:s3-csi-driver-sa"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.namespace == "default" || var.deploy_s3_mountpoint ? 1 : 0}'
      description: Role for s3 mountpoint service account for ${var.vpc_name}
      name: ${var.vpc_name}-${var.namespace}-s3-mountpoint-sa
      path: /gen3-service/
- aws_iam_role_policy:
    s3-mountpoint-role-policy:
      count: '${var.namespace == "default" || var.deploy_s3_mountpoint ? 1 : 0}'
      name: s3-mountpoint-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["s3:ListBucket"],
        "Effect": "Allow", "Resource": "*"}, {"Action": ["s3:GetObject", "s3:PutObject",
        "s3:AbortMultipartUpload", "s3:DeleteObject"], "Effect": "Allow", "Resource":
        "*"}]})}'
      role: ${aws_iam_role.s3-mountpoint-role[0].id}
- aws_iam_role:
    grafana-role:
      assume_role_policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Effect":
        "Allow", "Principal": {"Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"},
        {"Sid": "", "Effect": "Allow", "Principal": {"Federated": "arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${var.oidc_provider_arn}"},
        "Action": "sts:AssumeRoleWithWebIdentity", "Condition": {"StringEquals": {"${var.oidc_provider_arn}:sub":
        ["system:serviceaccount:monitoring:observability"], "${var.oidc_provider_arn}:aud":
        "sts.amazonaws.com"}}}]})}'
      count: '${var.namespace == "default" && var.deploy_grafana ? 1 : 0}'
      description: Role for grafana service account for ${var.vpc_name}
      name: ${var.vpc_name}-observability-role
      path: /gen3-service/
- aws_iam_role_policy:
    grafana-role-policy:
      count: '${var.namespace == "default" && var.deploy_grafana ? 1 : 0}'
      name: grafana-role-policy
      policy: '${jsonencode({"Version": "2012-10-17", "Statement": [{"Action": ["s3:AbortMultipartUpload",
        "s3:DeleteObject", "s3:GetObject", "s3:ListBucket", "s3:PutObject", "s3:DeleteObjectVersion",
        "s3:GetObjectVersion", "s3:PutObjectAcl", "s3:GetObjectAcl", "s3:ListBucketMultipartUploads",
        "s3:ListBucketVersions"], "Effect": "Allow", "Resource": ["arn:aws:s3:::${var.vpc_name}-observability-bucket",
        "arn:aws:s3:::${var.vpc_name}-observability-bucket/*"]}]})}'
      role: ${aws_iam_role.grafana-role[0].id}
---
module:
- audit-sqs:
    source: ../aws/modules/sqs
    sqs_name: audit
- ssjdispatcher-sqs:
    source: ../aws/modules/sqs
    sqs_name: ssjdispatcher
---
variable:
- ambassador_enabled:
    default: true
    description: Enable ambassador
    type: bool
- arborist_enabled:
    default: true
    description: Enable arborist
    type: bool
- argo_enabled:
    default: true
    description: Enable argo
    type: bool
- audit_enabled:
    default: true
    description: Enable audit
    type: bool
- aurora_username:
    default: ''
    description: aurora username
- aurora_hostname:
    default: ''
    description: aurora hostname
- aurora_password:
    default: ''
    description: aurora password
- aws-es-proxy_enabled:
    default: true
    description: Enable aws-es-proxy
    type: bool
- dbgap_enabled:
    default: false
    description: Enable dbgap sync in the usersync job
    type: bool
- dd_enabled:
    default: false
    description: Enable datadog
    type: bool
- deploy_external_secrets:
    default: false
    description: Deploy external secrets
    type: bool
- deploy_grafana:
    default: false
    description: Deploy grafana
    type: bool
- deploy_s3_mountpoint:
    default: false
    description: Deploy s3 mountpoints
    type: bool
- dictionary_url:
    default: ''
    description: URL to the data dictionary
- dispatcher_job_number:
    default: 10
    description: Number of dispatcher jobs
- dicom-server_enabled:
    default: false
    description: Enable dicom
    type: bool
- dicom-viewer_enabled:
    default: false
    description: Enable dicom server
    type: bool
- es_endpoint:
    default: ''
    description: Elasticsearch endpoint
- es_user_key:
    default: ''
    description: Elasticsearch user access key
- es_user_secret:
    default: ''
    description: Elasticsearch user secret key
- fence_enabled:
    default: true
    description: Enable fence
    type: bool
- gen3ff_enabled:
    default: false
    description: Enable gen3ff
    type: bool
- gen3ff_repo:
    default: quay.io/cdis/frontend-framework
    description: Gen3ff repo
- gen3ff_tag:
    default: main
    description: Gen3ff tag
- guppy_enabled:
    default: true
    description: Enable guppy
    type: bool
- hatchery_enabled:
    default: true
    description: Enable hatchery
    type: bool
- hostname:
    default: ''
    description: hostname of the commons
- indexd_enabled:
    default: true
    description: Enable indexd
    type: bool
- indexd_prefix:
    default: dg.XXXX/
    description: Indexd prefix
- ingress_enabled:
    default: true
    description: Create ALB ingress
    type: bool
- manifestservice_enabled:
    default: true
    description: Enable manfiestservice
    type: bool
- metadata_enabled:
    default: true
    description: Enable metadata
    type: bool
- netpolicy_enabled:
    default: false
    description: Enable network policy security rules
    type: bool
- peregrine_enabled:
    default: true
    description: Enable perergrine
    type: bool
- pidgin_enabled:
    default: false
    description: Enable pidgin
    type: bool
- portal_enabled:
    default: true
    description: Enable portal
    type: bool
- public_datasets:
    default: false
    description: whether the datasets are public
    type: bool
- requestor_enabled:
    default: false
    description: Enable requestor
    type: bool
- revproxy_arn:
    default: ''
    description: ARN for the revproxy cert in ACM
- revproxy_enabled:
    default: true
    description: Enable revproxy
    type: bool
- sheepdog_enabled:
    default: true
    description: Enable sheepdog
    type: bool
- slack_send_dbgap:
    default: false
    description: Enable slack message for usersync job
    type: bool
- slack_webhook:
    default: ''
    description: Slack webhook
- ssjdispatcher_enabled:
    default: true
    description: Enable ssjdispatcher
    type: bool
- sower_enabled:
    default: true
    description: Enable sower
    type: bool
- tier_access_level:
    default: private
    description: Tier access level for guppy
- tier_access_limit:
    default: '100'
    description: value for tier access limit
- usersync_enabled:
    default: true
    description: Enable usersync cronjob
    type: bool
- usersync_schedule:
    default: '*/30 * * * *'
    description: Cronjob schedule for usersync
- useryaml_s3_path:
    default: s3://cdis-gen3-users/dev/user.yaml
    description: S3 path to the user.yaml file
- vpc_name:
    default: ''
    description: Name of the VPC
- wts_enabled:
    default: true
    description: Enable wts
    type: bool
- cluster_endpoint:
    default: ''
- cluster_ca_cert:
    default: ''
- cluster_name:
    default: ''
- oidc_provider_arn:
    default: ''
- useryaml_path:
    default: ''
- gitops_path:
    default: ''
- fence_config_path:
    default: ''
- google_client_id:
    default: ''
- google_client_secret:
    default: ''
- fence_access_key:
    default: ''
- fence_secret_key:
    default: ''
- upload_bucket:
    default: ''
- waf_arn:
    default: ''
- namespace:
    default: default
- deploy_gen3:
    default: false
