resource:
- aws_ebs_encryption_by_default:
    example:
      enabled: true
---
locals:
- all_iam_policies:
  - policy: arn:aws:iam::aws:policy/AdministratorAccess
    role: admins
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Config_Read_List
    role: bsdisocyber
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Logs_Read
    role: bsdisocyber
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Config_Read_List
    role: bsdisorisk
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/IAMReadOnlyAccess
    role: bsdisorisk
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Logs_Read
    role: bsdisorisk
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/TrustedAdvisor_List
    role: bsdisorisk
  - policy: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AmazonEC2FullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AmazonRDSFullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AmazonRoute53FullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AmazonS3FullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AmazonVPCFullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
    role: devopsdirector
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/DevOpsDirectorConsolidatedPolicies
    role: devopsdirector
  - policy: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AmazonEC2FullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AmazonRDSFullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AmazonRoute53FullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AmazonS3FullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AmazonVPCFullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
    role: devopsgdc
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/DevOPSConsolidatedPolicies
    role: devopsgdc
  - policy: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AmazonEC2FullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AmazonRDSFullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AmazonRoute53FullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AmazonS3FullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AmazonVPCFullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
    role: devopsplanx
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/DevOPSConsolidatedPolicies
    role: devopsplanx
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/CtdsKmsSuper
    role: devopsplanx
  - policy: arn:aws:iam::aws:policy/job-function/Billing
    role: projectmanagergdc
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Config_Read_List
    role: projectmanagergdc
  - policy: arn:aws:iam::aws:policy/IAMReadOnlyAccess
    role: projectmanagergdc
  - policy: arn:aws:iam::aws:policy/job-function/Billing
    role: projectmanagerplanx
  - policy: arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Config_Read_List
    role: projectmanagerplanx
  - policy: arn:aws:iam::aws:policy/IAMReadOnlyAccess
    role: projectmanagerplanx
  relevant_iam_policies: '${[for x in local.all_iam_policies : {"role": "${x.role}",
    "policy": "${x.policy}"} if contains(var.roles, x.role)]}'
resource:
- aws_iam_policy:
    policy:
      for_each: ${fileset("${path.module}/custom_iam_policies", "*")}
      name: ${split(".", each.value)[0]}
      path: /
      policy: ${file("${path.module}/custom_iam_policies/${each.value}")}
- aws_iam_role:
    role:
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\
        \    {\n      \"Action\": \"sts:AssumeRoleWithSAML\",\n      \"Effect\": \"\
        Allow\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"\
        SAML:aud\": \"https://signin.aws.amazon.com/saml\"\n        }\n      },\n\
        \      \"Principal\": {\n        \"Federated\": \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:saml-provider/UChicagoIdP\"\
        \n      }\n    }\n  ]\n}"
      count: ${length(var.roles)}
      name: ${var.roles[count.index]}
- aws_iam_role_policy_attachment:
    policy_attachment:
      count: ${length(local.relevant_iam_policies)}
      depends_on:
      - ${aws_iam_role.role}
      - ${aws_iam_policy.policy}
      policy_arn: ${local.relevant_iam_policies[count.index].policy}
      role: ${local.relevant_iam_policies[count.index].role}
---
resource:
- aws_iam_saml_provider:
    uchicagoidp:
      name: UChicagoIdP
      saml_metadata_document: ${file("${path.module}/metadata/saml-metadata.xml")}
---
data:
- aws_caller_identity:
    current: {}
terraform:
- backend:
  - s3:
      encrypt: 'true'
  required_providers:
  - aws:
      source: hashicorp/aws
      version: ~> 5.0
---
resource:
- aws_s3_account_public_access_block:
    example:
      block_public_acls: true
      block_public_policy: true
---
variable:
- region:
    default: us-east-1
- roles:
    default:
    - devopsdirector
    - bsdisocyber
    - projectmanagerplanx
    - devopsplanx
    - devplanx
    description: Create these IAM roles
    type: ${list(string)}
