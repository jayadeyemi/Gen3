data:
- aws_vpc:
    selected:
      filter:
      - name: tag:Name
        values:
        - ${var.vpc_name}
- aws_security_group:
    default:
      filter:
      - name: group-name
        values:
        - default
      vpc_id: ${data.aws_vpc.selected.id}
- aws_subnet:
    private:
      filter:
      - name: tag:Name
        values:
        - ${var.subnet_name}
      vpc_id: ${data.aws_vpc.selected.id}
---
data:
- aws_iam_policy_document:
    assume_role:
      statement:
      - actions:
        - sts:AssumeRole
        principals:
        - identifiers:
          - ec2.amazonaws.com
          type: Service
resource:
- aws_iam_role:
    image_builder:
      assume_role_policy: ${data.aws_iam_policy_document.assume_role.json}
      name: ${var.pipeline_name}-image-builder-role
- aws_iam_role_policy_attachment:
    amazon_ssm:
      policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      role: ${aws_iam_role.image_builder.name}
- aws_iam_role_policy_attachment:
    image_builder:
      policy_arn: arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
      role: ${aws_iam_role.image_builder.name}
- aws_iam_role_policy_attachment:
    image_builder_ecr:
      policy_arn: arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
      role: ${aws_iam_role.image_builder.name}
- aws_iam_instance_profile:
    image_builder:
      name: ${var.pipeline_name}-image-builder-profile
      role: ${aws_iam_role.image_builder.name}
---
data:
- aws_ssm_parameter:
    ecs_optimized_ami_id:
      count: '${var.enable_ssm_fetch ? 1 : 0}'
      name: ${var.ssm_parameter_name}
resource:
- aws_imagebuilder_component:
    install_software:
      data: '${yamlencode({"name": "InstallSoftware", "description": "Installs bzip2,
        wget, Miniconda3 and awscli", "schemaVersion": 1.0, "phases": [{"name": "build",
        "steps": [{"name": "InstallPackages", "action": "ExecuteBash", "inputs": {"commands":
        ["sudo yum install -y bzip2 wget"]}}, {"name": "InstallMiniconda", "action":
        "ExecuteBash", "inputs": {"commands": ["sudo su ec2-user", "mkdir -p /home/ec2-user",
        "export HOME=/home/ec2-user/", "cd $HOME", "# Download and install miniconda
        in ec2-user''s home dir", "wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
        -O miniconda-install.sh", "bash miniconda-install.sh -b -f -p /home/ec2-user/miniconda",
        "rm miniconda-install.sh"]}}, {"name": "InstallAWSCLI", "action": "ExecuteBash",
        "inputs": {"commands": ["export HOME=/home/ec2-user/", "/home/ec2-user/miniconda/bin/conda
        install -c conda-forge -y awscli"]}}]}, {"name": "validate", "steps": [{"name":
        "CheckInstalls", "action": "ExecuteBash", "inputs": {"commands": ["which bzip2",
        "which wget", "which conda", "/home/ec2-user/miniconda/bin/conda list | grep
        awscli"]}}]}, {"name": "test", "steps": [{"name": "TestAWSCLI", "action":
        "ExecuteBash", "inputs": {"commands": ["/home/ec2-user/miniconda/bin/aws --version"]}}]}]})}'
      name: ${var.pipeline_name}-InstallSoftware
      platform: Linux
      version: 1.0.0
- aws_imagebuilder_infrastructure_configuration:
    image_builder:
      instance_profile_name: ${aws_iam_instance_profile.image_builder.name}
      name: ${var.pipeline_name}-infra-config
      security_group_ids:
      - ${data.aws_security_group.default.id}
      subnet_id: ${data.aws_subnet.private.id}
      terminate_instance_on_failure: true
- aws_imagebuilder_distribution_configuration:
    public_ami:
      distribution:
      - ami_distribution_configuration:
        - ami_tags:
            Role: Public Image
          launch_permission:
          - user_groups:
            - all
          name: ${var.public_ami_name}
        region: us-east-1
      name: ${var.pipeline_name}-dist-config
- aws_imagebuilder_image_recipe:
    recipe:
      block_device_mapping:
      - device_name: /dev/xvda
        ebs:
        - delete_on_termination: true
          encrypted: false
          volume_size: 30
          volume_type: gp2
      component:
      - component_arn: arn:aws:imagebuilder:us-east-1:aws:component/docker-ce-linux/1.0.0/1
      - component_arn: ${aws_imagebuilder_component.install_software.arn}
      name: ${var.pipeline_name}-recipe
      parent_image: '${var.enable_ssm_fetch ? data.aws_ssm_parameter.ecs_optimized_ami_id[0].value
        : var.base_image}'
      user_data_base64: ${try(base64encode(var.user_data), null)}
      version: 1.0.0
- aws_imagebuilder_image_pipeline:
    nextflow:
      distribution_configuration_arn: ${aws_imagebuilder_distribution_configuration.public_ami.arn}
      image_recipe_arn: ${aws_imagebuilder_image_recipe.recipe.arn}
      image_scanning_configuration:
      - image_scanning_enabled: ${var.image_scanning_enabled}
      infrastructure_configuration_arn: ${aws_imagebuilder_infrastructure_configuration.image_builder.arn}
      name: ${var.pipeline_name}
---
terraform:
- backend:
  - s3:
      encrypt: 'true'
---
variable:
- vpc_name:
    type: string
- subnet_name:
    default: eks_private_0
    type: string
- base_image:
    default: arn:aws:imagebuilder:us-east-1:aws:image/amazon-linux-2-ecs-optimized-kernel-5-x86/x.x.x
    type: string
- image_scanning_enabled:
    default: true
    type: bool
- enable_ssm_fetch:
    default: false
    description: Enable fetching SSM parameter
    type: bool
- ssm_parameter_name:
    default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    description: SSM parameter name
    type: string
- pipeline_name:
    default: nextflow-fips
    type: string
- public_ami_name:
    default: gen3-nextflow-{{ imagebuilder:buildDate }}
    type: string
- user_data:
    default: '#!/bin/bash

      # update yum repo

      sudo yum update -y

      # install and enable FIPS modules

      sudo yum install -y dracut-fips openssl >> /opt/fips-install.log

      sudo  dracut -f

      # configure grub

      sudo /sbin/grubby --update-kernel=ALL --args="fips=1"'
    type: string
