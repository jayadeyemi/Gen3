locals:
- cidrs: '${var.secondary_cidr_block != "" ? [''${var.env_vpc_cidr}'', ''${var.peering_cidr}'',
    ''${var.secondary_cidr_block}''] : [''${var.env_vpc_cidr}'', ''${var.peering_cidr}'']}'
  cidrs2: '${var.secondary_cidr_block != "" ? [''${var.env_vpc_cidr}'', ''${var.secondary_cidr_block}'']
    : [''${var.env_vpc_cidr}'']}'
resource:
- aws_subnet:
    squid_pub0:
      availability_zone: ${var.squid_availability_zones[count.index]}
      cidr_block: '${var.network_expansion ? cidrsubnet(var.squid_proxy_subnet, 2,
        count.index) : cidrsubnet(var.squid_proxy_subnet, 3, count.index)}'
      count: ${length(var.squid_availability_zones)}
      tags: '${tomap({"Name": "${var.env_squid_name}_pub${count.index}", "Organization":
        "${var.organization_name}", "Environment": "${var.env_squid_name}"})}'
      vpc_id: ${var.env_vpc_id}
- aws_iam_role:
    squid-auto_role:
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"\
        Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n      \
        \      },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n\
        \        }\n    ]\n}"
      name: ${var.env_squid_name}_role
      path: /
- aws_iam_role_policy:
    squid_policy:
      name: ${var.env_squid_name}_policy
      policy: ${data.aws_iam_policy_document.squid_policy_document.json}
      role: ${aws_iam_role.squid-auto_role.id}
- aws_iam_role_policy_attachment:
    eks-policy-AmazonSSMManagedInstanceCore:
      policy_arn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      role: ${aws_iam_role.squid-auto_role.id}
- aws_iam_instance_profile:
    squid-auto_role_profile:
      name: ${var.env_vpc_name}_squid-auto_role_profile
      role: ${aws_iam_role.squid-auto_role.id}
- aws_route_table_association:
    squid_auto0:
      count: ${length(var.squid_availability_zones)}
      route_table_id: ${var.main_public_route}
      subnet_id: ${aws_subnet.squid_pub0.*.id[count.index]}
- aws_launch_template:
    squid_auto:
      block_device_mappings:
      - device_name: /dev/xvda
        ebs:
        - volume_size: ${var.squid_instance_drive_size}
      iam_instance_profile:
      - name: ${aws_iam_instance_profile.squid-auto_role_profile.name}
      image_id: ${data.aws_ami.public_squid_ami.id}
      instance_type: ${var.squid_instance_type}
      key_name: ${var.ssh_key_name}
      lifecycle:
      - create_before_destroy: true
      name_prefix: ${var.env_squid_name}-lt
      network_interfaces:
      - associate_public_ip_address: true
        security_groups:
        - ${aws_security_group.squidauto_in.id}
        - ${aws_security_group.squidauto_out.id}
      tag_specifications:
      - resource_type: instance
        tags:
          Name: ${var.env_squid_name}
      user_data: "${sensitive(base64encode(\"MIME-Version: 1.0\nContent-Type: multipart/mixed;\
        \ boundary=\"BOUNDARY\"\n\n--BOUNDARY\nContent-Type: text/x-shellscript; charset=\"\
        us-ascii\"\n\n#!/bin/bash\nDISTRO=$(awk -F '[=\"]*' '/^NAME/ { print $2 }'\
        \ < /etc/os-release)\nUSER=\"ubuntu\"\nif [[ $DISTRO == \"Amazon Linux\" ]];\
        \ then\n  USER=\"ec2-user\"\n  if [[ $(awk -F '[=\"]*' '/^VERSION_ID/ { print\
        \ $2 }' < /etc/os-release) == \"2023\" ]]; then\n    DISTRO=\"al2023\"\n \
        \ fi\nfi\n(\n  if [[ $DISTRO == \"Amazon Linux\" ]]; then\n    sudo yum update\
        \ -y\n    sudo yum install git lsof dracut-fips openssl rsync -y\n    sudo\
        \ /sbin/grubby --update-kernel=ALL --args=\"fips=1\"\n    echo \"0 3 * * *\
        \ root yum update --security -y\" | sudo tee /etc/cron.d/security-updates\n\
        \  elif [[ $DISTRO == \"al2023\" ]]; then\n    sudo dnf update -y\n    sudo\
        \ dnf install git rsync lsof docker crypto-policies crypto-policies-scripts\
        \ -y\n    sudo fips-mode-setup --enable\n  fi\n) > /var/log/bootstrapping_script.log\n\
        --BOUNDARY\nContent-Type: text/cloud-config; charset=\"us-ascii\"\n\npower_state:\n\
        \    delay: now\n    mode: reboot\n    message: Powering off\n    timeout:\
        \ 2\n    condition: true\n\n--BOUNDARY\nContent-Type: text/x-shellscript;\
        \ charset=\"us-ascii\"\n\n#!/bin/bash\nDISTRO=$(awk -F '[=\"]*' '/^NAME/ {\
        \ print $2 }' < /etc/os-release)\nUSER=\"ubuntu\"\nif [[ $DISTRO == \"Amazon\
        \ Linux\" ]]; then\n  USER=\"ec2-user\"\n  if [[ $(awk -F '[=\"]*' '/^VERSION_ID/\
        \ { print $2 }' < /etc/os-release) == \"2023\" ]]; then\n    DISTRO=\"al2023\"\
        \n  fi\nfi\nUSER_HOME=\"/home/$USER\"\nCLOUD_AUTOMATION=\"$USER_HOME/cloud-automation\"\
        \n(\n  cd $USER_HOME\n  if [[ ! -z \"${var.slack_webhook}\" ]]; then\n   \
        \ echo \"${var.slack_webhook}\" > /slackWebhook\n  fi\n  git clone https://github.com/uc-cdis/cloud-automation.git\n\
        \  cd $CLOUD_AUTOMATION\n  git pull\n\n  # This is needed temporarily for\
        \ testing purposes ; before merging the code to master\n  if [ \"${var.branch}\"\
        \ != \"master\" ];\n  then\n    git checkout \"${var.branch}\"\n    git pull\n\
        \  fi\n  chown -R $USER. $CLOUD_AUTOMATION\n\n  echo \"127.0.1.1 ${var.env_squid_name}\"\
        \ | tee --append /etc/hosts\n  hostnamectl set-hostname ${var.env_squid_name}\n\
        \  if [[ $DISTRO == \"Ubuntu\" ]]; then\n    apt -y update\n    DEBIAN_FRONTEND='noninteractive'\
        \ apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold'\
        \ upgrade\n\n    apt autoremove -y\n    apt clean\n    apt autoclean\n  fi\n\
        \  cd $USER_HOME\n\n  bash \"${var.bootstrap_path}${var.bootstrap_script}\"\
        \ \"cwl_group=${var.env_log_group};${join(\";\",var.extra_vars)}\" 2>&1\n\
        \  cd $CLOUD_AUTOMATION\n  git checkout master\n  # Install qualys agent if\
        \ the activtion and customer id provided\n  # Amazon Linux does not support\
        \ qualys agent (?)\n  # https://success.qualys.com/discussions/s/question/0D52L00004TnwvgSAB/installing-qualys-cloud-agent-on-amazon-linux-2-instances\n\
        \  if [[ $DISTRO == \"Ubuntu\" ]]; then\n    if [[ ! -z \"${var.activation_id}\"\
        \ ]] || [[ ! -z \"${var.customer_id}\" ]]; then\n      apt install awscli\
        \ jq -y\n      aws s3 cp s3://qualys-agentpackage/QualysCloudAgent.deb ./qualys-cloud-agent.x86_64.deb\n\
        \      dpkg -i ./qualys-cloud-agent.x86_64.deb\n      # Clean up deb package\
        \ after install\n      rm qualys-cloud-agent.x86_64.deb\n      sudo /usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh\
        \ ActivationId=${var.activation_id} CustomerId=${var.customer_id}\n    fi\n\
        \  fi\n) > /var/log/bootstrapping_script_part2.log\n--BOUNDARY--\"))}"
- null_resource:
    service_depends_on:
      triggers:
        deps: ${jsonencode(var.squid_depends_on)}
- aws_iam_service_linked_role:
    squidautoscaling:
      aws_service_name: autoscaling.amazonaws.com
      custom_suffix: ${var.env_vpc_name}_squid
      lifecycle:
      - ignore_changes:
        - ${custom_suffix}
- aws_kms_grant:
    kms:
      count: '${var.fips ? 1 : 0}'
      grantee_principal: ${aws_iam_service_linked_role.squidautoscaling.arn}
      key_id: ${var.fips_ami_kms}
      name: kms-cmk-eks
      operations:
      - Encrypt
      - Decrypt
      - ReEncryptFrom
      - ReEncryptTo
      - GenerateDataKey
      - GenerateDataKeyWithoutPlaintext
      - DescribeKey
      - CreateGrant
- aws_autoscaling_group:
    squid_auto:
      depends_on:
      - ${null_resource.service_depends_on}
      - ${aws_route_table_association.squid_auto0}
      desired_capacity: ${var.cluster_desired_capasity}
      launch_template:
      - id: ${aws_launch_template.squid_auto.id}
        version: $Latest
      max_size: ${var.cluster_max_size}
      min_size: ${var.cluster_min_size}
      name: ${var.env_squid_name}
      service_linked_role_arn: ${aws_iam_service_linked_role.squidautoscaling.arn}
      tag:
      - key: Name
        propagate_at_launch: true
        value: ${var.env_squid_name}-grp-member
      - key: Environment
        propagate_at_launch: true
        value: ${var.organization_name}
      vpc_zone_identifier: ${aws_subnet.squid_pub0.*.id}
- aws_security_group:
    squidauto_in:
      description: security group that only enables ssh from VPC nodes and CSOC
      ingress:
      - cidr_blocks: ${local.cidrs}
        from_port: 22
        protocol: TCP
        to_port: 22
      - cidr_blocks: ${local.cidrs}
        from_port: 3128
        protocol: TCP
        to_port: 3128
      - cidr_blocks: ${local.cidrs2}
        from_port: 80
        protocol: TCP
        to_port: 80
      - cidr_blocks: ${local.cidrs2}
        from_port: 443
        protocol: TCP
        to_port: 443
      lifecycle:
      - ignore_changes:
        - ${description}
      name: ${var.env_squid_name}-squidauto_in
      tags:
        Environment: ${var.env_squid_name}
        Organization: ${var.organization_name}
      vpc_id: ${var.env_vpc_id}
- aws_security_group:
    squidauto_out:
      description: security group that allow outbound traffics
      egress:
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 0
        protocol: '-1'
        to_port: 0
      name: ${var.env_squid_name}-squidauto_out
      tags:
        Environment: ${var.env_squid_name}
        Organization: ${var.organization_name}
      vpc_id: ${var.env_vpc_id}
---
data:
- aws_caller_identity:
    current: {}
- aws_region:
    current: {}
- aws_ami:
    public_squid_ami:
      filter:
      - name: name
        values:
        - ${var.image_name_search_criteria}
      - name: virtualization-type
        values:
        - hvm
      - name: root-device-type
        values:
        - ebs
      most_recent: true
      owners:
      - ${var.ami_account_id}
- aws_iam_policy_document:
    squid_policy_document:
      statement:
      - actions:
        - ec2:*
        - route53:*
        - autoscaling:*
        - sts:AssumeRole
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:GetLogEvents
        - logs:PutLogEvents
        - logs:DescribeLogGroups
        - logs:DescribeLogStreams
        - logs:PutRetentionPolicy
        effect: Allow
        resources:
        - '*'
      - actions:
        - s3:Get*
        - s3:List*
        effect: Allow
        resources:
        - arn:aws:s3:::qualys-agentpackage
        - arn:aws:s3:::qualys-agentpackage/*
---
output:
- squid_auto-name:
    value: ${aws_autoscaling_group.squid_auto.name}
---
variable:
- env_vpc_cidr:
    description: CIDR of the VPC where this cluster will reside
- squid_proxy_subnet: {}
- env_vpc_name: {}
- env_squid_name: {}
- ami_account_id:
    default: '137112412989'
- image_name_search_criteria:
    default: al2023-ami-*
- peering_cidr:
    default: 10.128.0.0/20
- secondary_cidr_block:
    default: ''
- bootstrap_path:
    default: cloud-automation/flavors/squid_auto/
- bootstrap_script:
    default: squid_running_on_docker.sh
- squid_instance_type:
    default: t3.medium
    description: instance type that replicas of squid will be deployed into
- organization_name:
    default: Basic Services
    description: basically for tagging porpuses
- env_log_group:
    description: log group in which to send logs from the instance
- env_vpc_id:
    description: the vpc id where the proxy cluster will reside
- ssh_key_name:
    description: ssh key name that instances in the cluster will use
- squid_instance_drive_size:
    default: 8
    description: Size of the root volume for the instance
- squid_availability_zones:
    description: AZs on wich to associate the routes for the squid proxies
- main_public_route:
    description: The route table that allows public access
- route_53_zone_id:
    description: DNS zone for .internal.io
- branch:
    default: master
    description: branch to use in bootstrap script
- extra_vars:
    default:
    - squid_image=master
    description: additional variables to pass along with the bootstrapscript
- deploy_ha_squid:
    default: true
    description: Should this module be deployed
- cluster_desired_capasity:
    default: 2
    description: Desired capasity for the ha squid proxy
- cluster_max_size:
    default: 3
    description: Max size of the autoscaling group
- cluster_min_size:
    default: 1
    description: Min size of the autoscaling group
- network_expansion:
    default: false
    description: let k8s workers run on a /22 subnet
- squid_depends_on:
    default: ''
- activation_id:
    default: ''
- customer_id:
    default: ''
- slack_webhook:
    default: ''
- fips_ami_kms:
    default: arn:aws:kms:us-east-1:707767160287:key/mrk-697897f040ef45b0aa3cebf38a916f99
- fips:
    default: false
