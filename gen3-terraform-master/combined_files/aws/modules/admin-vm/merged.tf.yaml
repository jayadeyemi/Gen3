resource:
- aws_cloudwatch_log_group:
    csoc_log_group:
      name: ${var.child_name}
      retention_in_days: 1827
      tags:
        Environment: ${var.child_name}
        Organization: Basic Services
- aws_security_group:
    ssh:
      description: security group that only enables ssh
      ingress:
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 22
        protocol: TCP
        to_port: 22
      name: ssh_${var.child_name}
      tags:
        Environment: ${var.child_name}
        Organization: Basic Service
      vpc_id: ${var.csoc_vpc_id}
- aws_security_group:
    local:
      description: security group that only allow internal tcp traffics
      egress:
      - cidr_blocks:
        - 10.128.0.0/20
        - 54.224.0.0/12
        - ${var.vpc_cidr_list}
        from_port: 0
        protocol: '-1'
        to_port: 0
      ingress:
      - cidr_blocks:
        - 10.128.0.0/20
        from_port: 0
        protocol: '-1'
        to_port: 0
      name: local_${var.child_name}
      tags:
        Environment: ${var.child_name}
      vpc_id: ${var.csoc_vpc_id}
- aws_iam_role:
    child_role:
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\
        \    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n  \
        \      \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"\
        Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}"
      name: ${var.child_name}_role
      path: /
- aws_iam_role_policy:
    child_policy:
      name: ${var.child_name}_child_policy
      policy: ${data.aws_iam_policy_document.child_policy_document.json}
      role: ${aws_iam_role.child_role.id}
- aws_iam_instance_profile:
    child_role_profile:
      name: ${var.child_name}_child_role_profile
      role: ${aws_iam_role.child_role.id}
- aws_instance:
    login:
      ami: ${data.aws_ami.ubuntu.id}
      iam_instance_profile: ${aws_iam_instance_profile.child_role_profile.name}
      instance_type: t2.micro
      key_name: ${var.ssh_key_name}
      lifecycle:
      - ignore_changes:
        - ${ami}
        - ${key_name}
        - ${root_block_device}
      monitoring: true
      root_block_device:
      - encrypted: true
        volume_size: 24
      subnet_id: ${var.csoc_subnet_id}
      tags:
        Environment: ${var.child_name}
        Name: ${var.child_name}_admin
      user_data: "#!/bin/bash \n#Proxy configuration and hostname assigment for the\
        \ adminVM\necho http_proxy=http://cloud-proxy.internal.io:3128 >> /etc/environment\n\
        echo https_proxy=http://cloud-proxy.internal.io:3128/ >> /etc/environment\n\
        echo no_proxy=\"localhost,127.0.0.1,localaddress,169.254.169.254,.internal.io,logs.us-east-1.amazonaws.com\"\
        \  >> /etc/environment\necho 'Acquire::http::Proxy \"http://cloud-proxy.internal.io:3128\"\
        ;' >> /etc/apt/apt.conf.d/01proxy\necho 'Acquire::https::Proxy \"http://cloud-proxy.internal.io:3128\"\
        ;' >> /etc/apt/apt.conf.d/01proxy\necho '127.0.1.1 ${var.child_name}_admin'\
        \ | sudo tee --append /etc/hosts\nsudo hostnamectl set-hostname '${var.child_name}'_admin\n\
        \n#Requirements for cloud-automation\ncd /home/ubuntu\nsudo git clone https://github.com/uc-cdis/cloud-automation.git\
        \ \nsudo apt install -y unzip\nsudo apt-get -y install jq\n#sudo wget -O /tmp/terraform.zip\
        \  \\$(echo \"https://releases.hashicorp.com/terraform/$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform\
        \ | jq -r -M '.current_version')/terraform_\\$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform\
        \ | jq -r -M '.current_version')_linux_amd64.zip\")\nsudo wget -O /tmp/terraform.zip\
        \ https://releases.hashicorp.com/terraform/0.11.5/terraform_0.11.5_linux_amd64.zip\n\
        sudo unzip /tmp/terraform.zip -d /tmp\nsudo mv /tmp/terraform /usr/local/bin\n\
        sudo chmod +x /usr/local/bin/terraform\nsudo cat <<EOT  >>  /home/ubuntu/.bashrc\n\
        export GEN3_HOME=\"/home/ubuntu/cloud-automation\"\nif [ -f \"\\$${GEN3_HOME}/gen3/gen3setup.sh\"\
        \ ]; then\n  source \"\\$${GEN3_HOME}/gen3/gen3setup.sh\"\nfi\nEOT\n\n\n#\
        \ Adding AWS profile to the admin VM\nsudo python -m pip install awscli\n\
        sudo mkdir -p /home/ubuntu/.aws\nsudo cat <<EOT  >> /home/ubuntu/.aws/config\n\
        [default]\noutput = json\nregion = us-east-1\nrole_session_name = gen3-adminvm\n\
        role_arn = arn:aws:iam::${var.child_account_id}:role/csoc_adminvm\ncredential_source\
        \ = Ec2InstanceMetadata\n[profile ${var.child_name}]\noutput = json\nregion\
        \ = us-east-1\nrole_session_name = gen3-adminvm\nrole_arn = arn:aws:iam::${var.child_account_id}:role/csoc_adminvm\n\
        credential_source = Ec2InstanceMetadata\nEOT\nsudo chown ubuntu:ubuntu -R\
        \ /home/ubuntu/\n\n# Logging\n\nsed -i 's/SERVER/login_node-auth-{hostname}-{instance_id}/g'\
        \ /var/awslogs/etc/awslogs.conf\nsed -i 's/VPC/'${aws_cloudwatch_log_group.csoc_log_group.name}'/g'\
        \ /var/awslogs/etc/awslogs.conf\ncat >> /var/awslogs/etc/awslogs.conf <<EOM\n\
        [syslog]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/syslog\nlog_stream_name\
        \ = login_node-syslog-{hostname}-{instance_id}\ntime_zone = LOCAL\nlog_group_name\
        \ = ${aws_cloudwatch_log_group.csoc_log_group.name}\nEOM\n\nchmod 755 /etc/init.d/awslogs\n\
        systemctl enable awslogs\nsystemctl restart awslogs"
      vpc_security_group_ids:
      - ${aws_security_group.ssh.id}
      - ${aws_security_group.local.id}
---
data:
- aws_ami:
    ubuntu:
      filter:
      - name: name
        values:
        - ubuntu/images/hvm-ssd/ubuntu-*-20.04-amd64-server-*
      - name: virtualization-type
        values:
        - hvm
      most_recent: true
      owners:
      - 099720109477
- aws_iam_policy_document:
    child_policy_document:
      statement:
      - actions:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:GetLogEvents
        - logs:PutLogEvents
        - logs:DescribeLogGroups
        - logs:DescribeLogStreams
        - logs:PutRetentionPolicy
        effect: Allow
        resources:
        - '*'
      - actions:
        - sts:AssumeRole
        effect: Allow
        resources:
        - arn:aws:iam::${var.child_account_id}:role/csoc_adminvm
---
output:
- admin_private_ip:
    value: ${aws_instance.login.private_ip}
- role_id:
    value: ${aws_iam_role.child_role.name}
---
variable:
- ami_account_id:
    default: '707767160287'
- csoc_account_id:
    default: '433568766270'
- csoc_vpc_id:
    default: vpc-e2b51d99
- csoc_subnet_id:
    default: subnet-6127013c
- child_account_id: {}
- child_name: {}
- child_account_region:
    default: us-east-1
- aws_region:
    default: us-east-1
- elasticsearch_domain:
    default: commons-logs
- vpc_cidr_list: {}
- ssh_key_name:
    default: rarya_id_rsa
