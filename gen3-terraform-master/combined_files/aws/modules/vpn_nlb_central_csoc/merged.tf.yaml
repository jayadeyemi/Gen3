resource:
- aws_cloudwatch_log_group:
    vpn_log_group:
      name: ${var.cwl_group_name}
      retention_in_days: 1827
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Organization: ${var.organization_name}
- aws_iam_role:
    vpn-nlb_role:
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"\
        Principal\": {\n               \"Service\": \"ec2.amazonaws.com\"\n      \
        \      },\n            \"Effect\": \"Allow\",\n            \"Sid\": \"\"\n\
        \        }\n    ]\n}"
      name: ${var.env_vpn_nlb_name}_role
      path: /
- aws_iam_instance_profile:
    vpn-nlb_role_profile:
      name: ${var.env_vpn_nlb_name}_vpn-nlb_role_profile
      role: ${aws_iam_role.vpn-nlb_role.id}
- aws_iam_policy:
    vpn_policy:
      description: Cloud watch and S3 policy
      name: ${var.env_vpn_nlb_name}_policy
      policy: ${data.aws_iam_policy_document.vpn_policy_document.json}
- aws_iam_policy_attachment:
    vpn_policy_attachment:
      name: ${var.env_vpn_nlb_name}_policy_attach
      policy_arn: ${aws_iam_policy.vpn_policy.arn}
      roles:
      - ${aws_iam_role.vpn-nlb_role.name}
- aws_subnet:
    vpn_pub0:
      availability_zone: ${data.aws_availability_zones.available.names[count.index]}
      cidr_block: ${cidrsubnet("${var.vpn_server_subnet}", 3, count.index)}
      count: ${length(data.aws_availability_zones.available.names)}
      tags: '${tomap({"Name": "${var.env_vpn_nlb_name}_pub_${count.index}", "Organization":
        "${var.organization_name}", "Environment": "${var.env_vpn_nlb_name}"})}'
      vpc_id: ${var.env_vpc_id}
- aws_route_table_association:
    vpn_nlb0:
      count: ${length(aws_subnet.vpn_pub0.*.id)}
      route_table_id: ${var.env_pub_subnet_routetable_id}
      subnet_id: ${aws_subnet.vpn_pub0.*.id[count.index]}
- aws_lb:
    vpn_nlb:
      enable_cross_zone_load_balancing: true
      enable_deletion_protection: true
      internal: false
      load_balancer_type: network
      name: ${var.env_vpn_nlb_name}-prod
      subnets: ${aws_subnet.vpn_pub0.*.id}
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Organization: ${var.organization_name}
- aws_lb_target_group:
    vpn_nlb-tcp:
      name: ${var.env_vpn_nlb_name}-prod-tcp-tg
      port: 1194
      protocol: TCP
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Organization: ${var.organization_name}
      vpc_id: ${var.env_vpc_id}
- aws_lb_listener:
    vpn_nlb-tcp:
      default_action:
      - target_group_arn: ${aws_lb_target_group.vpn_nlb-tcp.arn}
        type: forward
      load_balancer_arn: ${aws_lb.vpn_nlb.arn}
      port: '1194'
      protocol: TCP
- aws_lb_target_group:
    vpn_nlb-qr:
      name: ${var.env_vpn_nlb_name}-prod-qr-tg
      port: 443
      protocol: TCP
      vpc_id: ${var.env_vpc_id}
- aws_lb_listener:
    vpn_nlb-qr:
      default_action:
      - target_group_arn: ${aws_lb_target_group.vpn_nlb-qr.arn}
        type: forward
      load_balancer_arn: ${aws_lb.vpn_nlb.arn}
      port: '443'
      protocol: TCP
- aws_lb_target_group:
    vpn_nlb-ssh:
      name: ${var.env_vpn_nlb_name}-prod-ssh-tg
      port: 22
      protocol: TCP
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Organization: ${var.organization_name}
      vpc_id: ${var.env_vpc_id}
- aws_lb_listener:
    vpn_nlb-ssh:
      default_action:
      - target_group_arn: ${aws_lb_target_group.vpn_nlb-ssh.arn}
        type: forward
      load_balancer_arn: ${aws_lb.vpn_nlb.arn}
      port: '22'
      protocol: TCP
- aws_launch_template:
    vpn_nlb:
      block_device_mappings:
      - device_name: /dev/xvda
        ebs:
        - volume_size: 30
      depends_on:
      - ${aws_iam_instance_profile.vpn-nlb_role_profile}
      iam_instance_profile:
      - name: ${aws_iam_instance_profile.vpn-nlb_role_profile.name}
      image_id: ${data.aws_ami.public_vpn_ami.id}
      instance_type: m5.xlarge
      key_name: ${var.ssh_key_name}
      lifecycle:
      - create_before_destroy: true
      name_prefix: ${var.env_vpn_nlb_name}-lt
      network_interfaces:
      - associate_public_ip_address: true
        security_groups:
        - ${aws_security_group.vpnnlb_in.id}
        - ${aws_security_group.vpnnlb_out.id}
      user_data: "${sensitive(base64encode(\"#!/bin/bash\n\nUSER=\"ubuntu\"\nUSER_HOME=\"\
        /home/$USER\"\nCLOUD_AUTOMATION=\"$USER_HOME/cloud-automation\"\n\n(\n  cd\
        \ $USER_HOME\n  git clone https://github.com/uc-cdis/cloud-automation.git\n\
        \n  # This is needed temporarily for testing purposes ; before merging the\
        \ code to master\n  if [ \"${var.branch}\" != \"master\" ];\n  then\n    cd\
        \ $CLOUD_AUTOMATION\n    git checkout \"${var.branch}\"\n    git pull\n  fi\n\
        \n\n  cat $CLOUD_AUTOMATION/${var.authorized_keys} | sudo tee --append $USER_HOME/.ssh/authorized_keys\n\
        \  echo \"127.0.1.1 ${var.env_vpn_nlb_name}\" | sudo tee --append /etc/hosts\n\
        \  #hostnamectl set-hostname ${var.env_vpn_nlb_name}\n  echo ${var.env_cloud_name}\
        \ | tee /etc/hostname\n  hostnamectl set-hostname ${var.env_cloud_name}\n\n\
        \  apt -y update\n  DEBIAN_FRONTEND='noninteractive' apt-get -y -o Dpkg::Options::='--force-confdef'\
        \ -o Dpkg::Options::='--force-confold' upgrade\n\n  cd $USER_HOME\n\n  bash\
        \ \"${var.bootstrap_path}${var.bootstrap_script}\" \"cwl_group=${aws_cloudwatch_log_group.vpn_log_group.name};vpn_nlb_name=${var.env_vpn_nlb_name};account_id=${data.aws_caller_identity.current.account_id};csoc_vpn_subnet=${var.csoc_vpn_subnet};csoc_vm_subnet=${var.csoc_vm_subnet};cloud_name=${var.env_cloud_name};${join(\"\
        ;\",var.extra_vars)}\" 2>&1\n\n  apt autoremove -y\n  apt clean\n  apt autoclean\n\
        \n  cd $CLOUD_AUTOMATION\n  git checkout master\n  chown -R $USER. $USER_HOME\n\
        ) > /var/log/bootstrapping_script.log\"))}"
- aws_autoscaling_group:
    vpn_nlb:
      desired_capacity: 1
      launch_template:
      - id: ${aws_launch_template.vpn_nlb.id}
        version: $Latest
      max_size: 1
      min_size: 1
      name: ${var.env_vpn_nlb_name}_autoscaling_grp
      tag:
      - key: Name
        propagate_at_launch: true
        value: ${var.env_vpn_nlb_name}_autoscaling_grp_member
      - key: Environment
        propagate_at_launch: true
        value: ${var.env_vpn_nlb_name}
      - key: Organization
        propagate_at_launch: true
        value: ${var.organization_name}
      target_group_arns:
      - ${aws_lb_target_group.vpn_nlb-tcp.arn}
      - ${aws_lb_target_group.vpn_nlb-qr.arn}
      - ${aws_lb_target_group.vpn_nlb-ssh.arn}
      vpc_zone_identifier: ${aws_subnet.vpn_pub0.*.id}
- aws_security_group:
    vpnnlb_in:
      description: security group that only enables ssh from VPC nodes and CSOC
      ingress:
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 22
        protocol: TCP
        to_port: 22
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 1194
        protocol: TCP
        to_port: 1194
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 80
        protocol: TCP
        to_port: 80
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 443
        protocol: TCP
        to_port: 443
      lifecycle:
      - ignore_changes:
        - ${description}
      name: ${var.env_vpn_nlb_name}-vpnnlb_in
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Organization: ${var.organization_name}
      vpc_id: ${var.env_vpc_id}
- aws_security_group:
    vpnnlb_out:
      description: security group that allow outbound traffics
      egress:
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 0
        protocol: '-1'
        to_port: 0
      name: ${var.env_vpn_nlb_name}-vpnnlb_out
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Organization: ${var.organization_name}
      vpc_id: ${var.env_vpc_id}
- aws_route53_record:
    vpn-nlb:
      name: ${var.env_vpn_nlb_name}
      records:
      - ${aws_lb.vpn_nlb.dns_name}
      ttl: '300'
      type: CNAME
      zone_id: ${var.csoc_planx_dns_zone_id}
- aws_s3_bucket:
    vpn-certs-and-files:
      bucket: vpn-certs-and-files-${var.env_vpn_nlb_name}
      tags:
        Environment: ${var.env_vpn_nlb_name}
        Name: vpn-certs-and-files-${var.env_vpn_nlb_name}
        Purpose: data bucket
- aws_s3_bucket_server_side_encryption_configuration:
    vpn-certs-and-files:
      bucket: ${aws_s3_bucket.vpn-certs-and-files.id}
      rule:
      - apply_server_side_encryption_by_default:
        - sse_algorithm: AES256
- aws_s3_bucket_versioning:
    vpn-certs-and-files:
      bucket: ${aws_s3_bucket.vpn-certs-and-files.id}
      versioning_configuration:
      - status: Enabled
---
data:
- aws_caller_identity:
    current: {}
- aws_availability_zones:
    available: {}
- aws_iam_policy_document:
    vpn_policy_document:
      statement:
      - actions:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:GetLogEvents
        - logs:PutLogEvents
        - logs:DescribeLogGroups
        - logs:DescribeLogStreams
        - logs:PutRetentionPolicy
        effect: Allow
        resources:
        - '*'
      - actions:
        - s3:Get*
        - s3:List*
        effect: Allow
        resources:
        - ${aws_s3_bucket.vpn-certs-and-files.arn}
        - ${aws_s3_bucket.vpn-certs-and-files.arn}/*
      - actions:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        effect: Allow
        resources:
        - ${aws_s3_bucket.vpn-certs-and-files.arn}
        - ${aws_s3_bucket.vpn-certs-and-files.arn}/*
- aws_ami:
    public_vpn_ami:
      filter:
      - name: name
        values:
        - ${var.image_name_search_criteria}
      - name: virtualization-type
        values:
        - hvm
      - name: root-device-type
        values:
        - ebs
      most_recent: true
      owners:
      - ${var.ami_account_id}
---
output:
- vpn_nlb_dns_name:
    value: ${aws_lb.vpn_nlb.dns_name}
---
variable:
- csoc_vpn_subnet: {}
- csoc_vm_subnet: {}
- vpn_server_subnet: {}
- env_vpc_id:
    default: vpc-e2b51d99
- env_vpn_nlb_name:
    default: csoc-prod-vpn
- env_cloud_name:
    default: planxprod
- ami_account_id:
    default: 099720109477
- image_name_search_criteria:
    default: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-2018*
- env_pub_subnet_routetable_id:
    default: rtb-1cb66860
- csoc_planx_dns_zone_id:
    default: ZG153R4AYDHHK
- ssh_key_name:
    default: rarya_id_rsa
- bootstrap_path:
    default: cloud-automation/flavors/vpn_nlb_central/
- bootstrap_script:
    default: vpnvm.sh
- organization_name:
    default: Basic Service
    description: For tagging purposes
- branch:
    default: master
    description: For testing purposes
- extra_vars:
    default: []
    description: Additional variables for the bootstrap script
- authorized_keys:
    default: files/authorized_keys/ops_team
    description: This file content will be appended to the users .ssh/authorized_keys
- cwl_group_name:
    default: csoc-prod-vpn.planx-pla.net_log_group
    description: Logs group name of instance logs
