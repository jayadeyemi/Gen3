locals:
- bucket_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    \
    \    {\n            \"Sid\": \"AWSCloudTrailAclCheck20150319\",\n            \"\
    Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\"\
    : \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:GetBucketAcl\"\
    ,\n            \"Resource\": \"arn:aws:s3:::${var.account_name}-management-logs\"\
    \n        },\n        {\n            \"Sid\": \"AWSCloudTrailWrite20150319\",\n\
    \            \"Effect\": \"Allow\",\n            \"Principal\": {\n          \
    \      \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n           \
    \ \"Action\": \"*\",\n            \"Resource\": \"arn:aws:s3:::${var.account_name}-management-logs/*\"\
    ,\n            \"Condition\": {\n                \"StringEquals\": {\n       \
    \             \"s3:x-amz-acl\": \"bucket-owner-full-control\"\n              \
    \  }\n            }\n        }\n    ]\n}"
resource:
- aws_s3_bucket:
    management-logs_bucket:
      bucket: ${var.account_name}-management-logs
      tags:
        Environment: ${var.account_name}
        Organization: CTDS
- aws_s3_bucket_server_side_encryption_configuration:
    management-logs_bucket:
      bucket: ${aws_s3_bucket.management-logs_bucket.id}
      rule:
      - apply_server_side_encryption_by_default:
        - sse_algorithm: AES256
- aws_s3_bucket_lifecycle_configuration:
    management-logs_bucket:
      bucket: ${aws_s3_bucket.management-logs_bucket.id}
      rule:
      - expiration:
        - days: 120
        filter:
        - and:
          - prefix: management-logs/
            tags:
              autoclean: 'true'
              rule: log
        id: management-logs
        status: Enabled
        transition:
        - days: 30
          storage_class: ONEZONE_IA
        - days: 60
          storage_class: GLACIER
- aws_s3_bucket_policy:
    b:
      bucket: ${aws_s3_bucket.management-logs_bucket.id}
      policy: ${local.bucket_policy}
- aws_cloudwatch_log_group:
    management-logs_group:
      name: ${var.account_name}_management-logs
      retention_in_days: 1827
      tags:
        Environment: ALL
        Organization: CTDS
- aws_iam_role:
    cloudtrail_role:
      assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n\
        \    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\"\
        : {\n        \"Service\": \"cloudtrail.amazonaws.com\"\n      },\n      \"\
        Action\": \"sts:AssumeRole\"\n    }\n  ]\n}"
      name: management-logs_cloudtrail_role
      path: /
      tags:
        Environment: ${var.account_name}
        Organization: CTDS
- aws_iam_role_policy:
    cloudtrail_to_cloudwatch_policy:
      name: ${var.account_name}_management-logs_policy
      policy: ${data.aws_iam_policy_document.cloudtrail_to_cloudwatch_policy_document.json}
      role: ${aws_iam_role.cloudtrail_role.id}
- aws_cloudtrail:
    logs-trail:
      cloud_watch_logs_group_arn: ${aws_cloudwatch_log_group.management-logs_group.arn}
      cloud_watch_logs_role_arn: ${aws_iam_role.cloudtrail_role.arn}
      event_selector:
      - include_management_events: true
        read_write_type: All
      is_multi_region_trail: true
      name: ${var.account_name}_management_trail
      s3_bucket_name: ${aws_s3_bucket.management-logs_bucket.id}
      s3_key_prefix: management-logs
      tags:
        Environment: ${var.account_name}
        Organization: CTDS
- aws_cloudwatch_log_subscription_filter:
    csoc_subscription:
      destination_arn: arn:aws:logs:${data.aws_region.current.name}:${var.csoc_account_id}:destination:management-logs_logs_destination
      filter_pattern: ''
      log_group_name: ${aws_cloudwatch_log_group.management-logs_group.name}
      name: ${var.account_name}_subscription
---
data:
- aws_region:
    current:
      provider: ${aws}
- aws_iam_policy_document:
    cloudtrail_to_cloudwatch_policy_document:
      statement:
      - actions:
        - logs:*
        effect: Allow
        resources:
        - ${aws_cloudwatch_log_group.management-logs_group.arn}:*
- aws_iam_policy_document:
    sns_access:
      statement:
      - actions:
        - SNS:Publish
        - SNS:GetTopicAttributes
        effect: Allow
        resources:
        - '*'
- aws_iam_policy_document:
    cloudtrail_access:
      statement:
      - actions:
        - cloudtrail:DescribeTrails
        - cloudtrail:LookupEvents
        - cloudtrail:GetTrailStatus
        - cloudtrail:ListTags
        - cloudtrail:StartLogging
        effect: Allow
        resources:
        - '*'
- aws_iam_policy_document:
    cloudwatchlogs_access:
      statement:
      - actions:
        - logs:List*
        - logs:Get*
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        effect: Allow
        resources:
        - '*'
---
module:
- cloudwatch-events:
    cwe_rule_description: Lets check if someone dares to stop logging
    cwe_rule_name: ${var.account_name}-cloudtrail-StopLogging
    cwe_rule_pattern: "{\n  \"source\": [\n    \"aws.cloudtrail\"\n  ],\n  \"detail\"\
      : {\n    \"eventName\": [\n      \"StopLogging\"\n    ]\n  }\n}"
    cwe_target_arn: ${element(module.alerting-lambda.function_arn, 0)}
    source: ../cloudwatch-events/
- alerting-lambda:
    lambda_function_description: Checking for things that should or might not happend
    lambda_function_env:
      topic: arn:aws:sns:us-east-1:433568766270:planx-csoc-alerts-for-bsd-security
    lambda_function_file: ${path.module}/../../../../files/lambda/security_alerts.py
    lambda_function_handler: security_alerts.lambda_handler
    lambda_function_iam_role_arn: ${module.role-for-lambda.role_arn}
    lambda_function_name: ${var.account_name}-security-alert-lambda
    source: ../lambda-function/
- role-for-lambda:
    role_assume_role_policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\":\
      \ [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\"\
      : {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Action\"\
      : \"sts:AssumeRole\"\n    }\n  ]\n}"
    role_description: Role for the alerting lambda function
    role_name: ${var.account_name}-security-alert-role
    source: ../iam-role/
resource:
- aws_lambda_permission:
    allow_cloudwatch:
      action: lambda:InvokeFunction
      function_name: ${element(module.alerting-lambda.function_name, 0)}
      principal: events.amazonaws.com
      source_arn: ${module.cloudwatch-events.event_arn}
      statement_id: AllowExecutionFromCloudWatch
- aws_iam_role_policy:
    lambda_policy_SNS:
      name: ${var.account_name}-security-alert-policy-for-SNS
      policy: ${data.aws_iam_policy_document.sns_access.json}
      role: ${module.role-for-lambda.role_id}
- aws_iam_role_policy:
    lambda_policy_CT:
      name: ${var.account_name}-security-alert-policy-for-CloudTrail
      policy: ${data.aws_iam_policy_document.cloudtrail_access.json}
      role: ${module.role-for-lambda.role_id}
- aws_iam_role_policy:
    lambda_policy_CWL:
      name: ${var.account_name}-security-alert-policy-for-CloudWatchLogs
      policy: ${data.aws_iam_policy_document.cloudwatchlogs_access.json}
      role: ${module.role-for-lambda.role_id}
---
output:
- cloudwatch_log_group:
    value: ${aws_cloudwatch_log_group.management-logs_group.name}
- s3_bucket:
    value: ${aws_s3_bucket.management-logs_bucket.bucket}
---
variable:
- csoc_account_id:
    default: '433568766270'
- account_name: {}
- alarm_actions: {}
