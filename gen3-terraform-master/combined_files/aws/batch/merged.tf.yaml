resource:
- aws_vpc:
    new_vpc:
      cidr_block: 10.1.0.0/16
      tags:
        Organization: gen3
        description: Created by bucket-manifest job
        job-id: ${var.job_id}
        prefix: ${var.prefix}
- aws_internet_gateway:
    gw:
      tags:
        Organization: gen3
        description: Created by bucket-manifest job
        job-id: ${var.job_id}
      vpc_id: ${aws_vpc.new_vpc.id}
- aws_subnet:
    new_subnet:
      cidr_block: 10.1.0.0/21
      map_public_ip_on_launch: true
      tags:
        Organization: gen3
        description: Created by bucket-manifest job
        job-id: ${var.job_id}
      vpc_id: ${aws_vpc.new_vpc.id}
- aws_route_table:
    new_route:
      route:
      - cidr_block: 0.0.0.0/0
        gateway_id: ${aws_internet_gateway.gw.id}
      tags:
        Organization: gen3
        description: Created by bucket-manifest job
        job-id: ${var.job_id}
      vpc_id: ${aws_vpc.new_vpc.id}
- aws_route_table_association:
    new_association:
      route_table_id: ${aws_route_table.new_route.id}
      subnet_id: ${aws_subnet.new_subnet.id}
- aws_sqs_queue:
    new_sqs_queue:
      message_retention_seconds: 86400
      name: ${var.sqs_queue_name}
      tags:
        Organization: gen3
        description: Created by bucket-manifest job
        job-id: ${var.job_id}
- aws_batch_job_definition:
    new_batch_job_definition:
      container_properties: ${file("${var.container_properties}")}
      name: ${var.batch_job_definition_name}
      type: container
- aws_iam_role:
    iam_instance_role:
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n    {\n        \"Action\": \"sts:AssumeRole\",\n        \"Effect\": \"\
        Allow\",\n        \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\
        \n        }\n    }\n    ]\n}"
      name: ${var.iam_instance_role}
- aws_iam_policy:
    new_iam_policy:
      depends_on:
      - ${aws_sqs_queue.new_sqs_queue}
      path: /
      policy: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n    \
        \  \"Action\": [\n      \"ec2:DescribeTags\",\n      \"ecs:CreateCluster\"\
        ,\n      \"ecs:DeregisterContainerInstance\",\n      \"ecs:DiscoverPollEndpoint\"\
        ,\n      \"ecs:Poll\",\n      \"ecs:RegisterContainerInstance\",\n      \"\
        ecs:StartTelemetrySession\",\n      \"ecs:UpdateContainerInstancesState\"\
        ,\n      \"ecs:Submit*\",\n      \"ecr:GetAuthorizationToken\",\n      \"\
        ecr:BatchCheckLayerAvailability\",\n      \"ecr:GetDownloadUrlForLayer\",\n\
        \      \"ecr:BatchGetImage\",\n      \"logs:CreateLogStream\",\n      \"logs:PutLogEvents\"\
        \n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    },\n\
        \    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"sqs:ListQueues\"\
        ,\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n\
        \      \"Action\": \"sqs:*\",\n      \"Resource\": \"${aws_sqs_queue.new_sqs_queue.arn}\"\
        \n    }\n  ]\n}"
- aws_iam_role_policy_attachment:
    ecs_instance_role:
      policy_arn: ${aws_iam_policy.new_iam_policy.id}
      role: ${aws_iam_role.iam_instance_role.name}
- aws_iam_instance_profile:
    iam_instance_profile_role:
      name: ${var.iam_instance_profile_role}
      role: ${aws_iam_role.iam_instance_role.name}
- aws_iam_role:
    aws_batch_service_role:
      assume_role_policy: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [\n    {\n        \"Action\": \"sts:AssumeRole\",\n        \"Effect\": \"\
        Allow\",\n        \"Principal\": {\n        \"Service\": \"batch.amazonaws.com\"\
        \n        }\n    }\n    ]\n}"
      name: ${var.aws_batch_service_role}
- aws_iam_role_policy_attachment:
    aws_batch_service_role:
      policy_arn: arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      role: ${aws_iam_role.aws_batch_service_role.name}
- aws_security_group:
    new_sg:
      egress:
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 0
        protocol: '-1'
        to_port: 0
      ingress:
      - cidr_blocks:
        - 0.0.0.0/0
        from_port: 22
        protocol: tcp
        to_port: 22
      name: ${var.aws_batch_compute_environment_sg}
      tags:
        Organization: gen3
        description: Created by bucket-manifest job
        job-id: ${var.job_id}
      vpc_id: ${aws_vpc.new_vpc.id}
- aws_batch_compute_environment:
    new_batch_compute_environment:
      compute_environment_name: ${var.compute_environment_name}
      compute_resources:
      - ec2_key_pair: ${var.ec2_key_pair}
        instance_role: ${aws_iam_instance_profile.iam_instance_profile_role.arn}
        instance_type: ${var.instance_type}
        max_vcpus: ${var.max_vcpus}
        min_vcpus: ${var.min_vcpus}
        security_group_ids:
        - ${aws_security_group.new_sg.id}
        subnets:
        - ${aws_subnet.new_subnet.id}
        type: ${var.compute_env_type}
      depends_on:
      - ${aws_iam_role_policy_attachment.aws_batch_service_role}
      service_role: ${aws_iam_role.aws_batch_service_role.arn}
      type: ${var.compute_type}
- aws_batch_job_queue:
    batch-job-queue:
      compute_environments:
      - ${aws_batch_compute_environment.new_batch_compute_environment.arn}
      name: ${var.batch_job_queue_name}
      priority: ${var.priority}
      state: ENABLED
- aws_s3_bucket:
    new_bucket:
      bucket: ${var.output_bucket_name}
- aws_s3_bucket_server_side_encryption_configuration:
    new_bucket:
      bucket: ${aws_s3_bucket.new_bucket.id}
      rule:
      - apply_server_side_encryption_by_default:
        - sse_algorithm: AES256
terraform:
- backend:
  - s3:
      encrypt: 'true'
  required_providers:
  - aws:
      source: hashicorp/aws
      version: ~> 5.0
---
variable:
- job_id: {}
- prefix: {}
- batch_job_definition_name:
    description: batch job defintion name
- container_properties:
    description: container properties
- iam_instance_role: {}
- iam_instance_profile_role: {}
- aws_batch_service_role: {}
- aws_batch_compute_environment_sg: {}
- compute_environment_name: {}
- instance_type:
    default:
    - c4.large
    description: ec2 instance type to handle the job
    type: ${list(string)}
- priority:
    default: 10
    description: job priority
- max_vcpus:
    default: 256
    description: The maximum number of EC2 vCPUs that an environment can reach
- min_vcpus:
    default: 0
    description: The maximum number of EC2 vCPUs that an environment should maintain
- compute_env_type:
    default: EC2
    description: The type of compute environment. Valid items are EC2 or SPOT
- compute_type:
    default: MANAGED
    description: MANAGED or UNMANAGED
- ec2_key_pair:
    default: emalinowski
    description: The EC2 key pair that is used for instances launched in the compute
      environment.
- batch_job_queue_name:
    description: batch job queue name
- sqs_queue_name:
    description: sqs queue name
- output_bucket_name:
    description: output bucket
